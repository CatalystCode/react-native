// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/react.uwp.image.2.h"
#include "winrt/react.uwp.h"

namespace winrt::impl {

template <typename D> react::uwp::image::ResizeMode consume_react_uwp_image_IReactImageBrush<D>::ResizeMode() const
{
    react::uwp::image::ResizeMode value{};
    check_hresult(WINRT_SHIM(react::uwp::image::IReactImageBrush)->get_ResizeMode(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_image_IReactImageBrush<D>::ResizeMode(react::uwp::image::ResizeMode const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::image::IReactImageBrush)->put_ResizeMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Uri consume_react_uwp_image_IReactImageBrush<D>::SourceUri() const
{
    Windows::Foundation::Uri value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::image::IReactImageBrush)->get_SourceUri(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_image_IReactImageBrush<D>::SourceUri(Windows::Foundation::Uri const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::image::IReactImageBrush)->put_SourceUri(get_abi(value)));
}

template <typename D>
struct produce<D, react::uwp::image::IReactImageBrush> : produce_base<D, react::uwp::image::IReactImageBrush>
{
    int32_t WINRT_CALL get_ResizeMode(react::uwp::image::ResizeMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeMode, WINRT_WRAP(react::uwp::image::ResizeMode));
            *value = detach_from<react::uwp::image::ResizeMode>(this->shim().ResizeMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ResizeMode(react::uwp::image::ResizeMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeMode, WINRT_WRAP(void), react::uwp::image::ResizeMode const&);
            this->shim().ResizeMode(*reinterpret_cast<react::uwp::image::ResizeMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceUri(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceUri, WINRT_WRAP(Windows::Foundation::Uri));
            *value = detach_from<Windows::Foundation::Uri>(this->shim().SourceUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceUri(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceUri, WINRT_WRAP(void), Windows::Foundation::Uri const&);
            this->shim().SourceUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::react::uwp::image {

inline ReactImageBrush::ReactImageBrush() :
    ReactImageBrush(impl::call_factory<ReactImageBrush>([](auto&& f) { return f.template ActivateInstance<ReactImageBrush>(); }))
{}

}

namespace winrt::impl {

struct property_react_uwp_image_IReactImageBrush
{ struct named {
    struct ResizeMode
    {
        struct name { static constexpr std::wstring_view value{ L"ResizeMode"sv }; };
        using property_type = winrt::react::uwp::image::ResizeMode;
        using target_type = winrt::react::uwp::image::IReactImageBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ResizeMode();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ResizeMode(std::forward<Value>(value));
            }
        };
    };
    struct SourceUri
    {
        struct name { static constexpr std::wstring_view value{ L"SourceUri"sv }; };
        using property_type = winrt::Windows::Foundation::Uri;
        using target_type = winrt::react::uwp::image::IReactImageBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SourceUri();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.SourceUri(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::ResizeMode, named::SourceUri>; };
};

struct property_react_uwp_image_ReactImageBrush
{ struct named {
    struct SourceUri
    {
        struct name { static constexpr std::wstring_view value{ L"SourceUri"sv }; };
        using property_type = winrt::Windows::Foundation::Uri;
        using target_type = winrt::react::uwp::image::ReactImageBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SourceUri();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.SourceUri(std::forward<Value>(value));
            }
        };
    };
    struct ResizeMode
    {
        struct name { static constexpr std::wstring_view value{ L"ResizeMode"sv }; };
        using property_type = winrt::react::uwp::image::ResizeMode;
        using target_type = winrt::react::uwp::image::ReactImageBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ResizeMode();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ResizeMode(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::SourceUri, named::ResizeMode>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<react::uwp::image::IReactImageBrush> : impl::property_react_uwp_image_IReactImageBrush::named {};
template <> struct properties<react::uwp::image::IReactImageBrush> : impl::property_react_uwp_image_IReactImageBrush::list {};
template <> struct named_property<react::uwp::image::ReactImageBrush> : impl::property_react_uwp_image_ReactImageBrush::named {};
template <> struct properties<react::uwp::image::ReactImageBrush> : impl::property_react_uwp_image_ReactImageBrush::list {};

template <>
struct base_type<react::uwp::image::ReactImageBrush> { using type = Windows::UI::Xaml::Media::XamlCompositionBrushBase; };template <> struct get_enumerator_names<react::uwp::image::ResizeMode>
{
    static constexpr std::array<std::wstring_view, 5> value{{ 
        {L"Cover", 5},
        {L"Contain", 7},
        {L"Stretch", 7},
        {L"Repeat", 6},
        {L"Center", 6}, }};
};
template <> struct get_enumerator_values<react::uwp::image::ResizeMode>
{
    static constexpr std::array<react::uwp::image::ResizeMode, 5> value{{ 
        react::uwp::image::ResizeMode::Cover,
        react::uwp::image::ResizeMode::Contain,
        react::uwp::image::ResizeMode::Stretch,
        react::uwp::image::ResizeMode::Repeat,
        react::uwp::image::ResizeMode::Center, }};
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::react::uwp::image::IReactImageBrush> : winrt::impl::hash_base<winrt::react::uwp::image::IReactImageBrush> {};
template<> struct hash<winrt::react::uwp::image::ReactImageBrush> : winrt::impl::hash_base<winrt::react::uwp::image::ReactImageBrush> {};

}
