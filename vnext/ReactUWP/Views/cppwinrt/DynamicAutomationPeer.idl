// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// This file was used to generate the files in the cppwinrt subfolders
//
// If you modify this file, be sure to run buildcppwinrt.cmd in this folder
// to generate new headers

#define VERSION 1.0

import "AccessibilityAction.idl";
#include "NamespaceRedirect.h"

// The DynamicAutomationProperties must be in the project namespace to be
// usable by Xaml dependency properties.
// We use a macro to be able to change it from the project file.
#ifndef PROJECT_ROOT_NAMESPACE
#define PROJECT_ROOT_NAMESPACE react.uwp
#endif

namespace PROJECT_ROOT_NAMESPACE
{
  enum AccessibilityRoles
  {
    None = 0,
    Button,
    Link,
    Search,
    Image,
    KeyboardKey,
    Text,
    Adjustable,
    ImageButton,
    Header,
    Summary,
    Alert,
    CheckBox,
    ComboBox,
    Menu,
    MenuBar,
    MenuItem,
    ProgressBar,
    Radio,
    RadioGroup,
    ScrollBar,
    SpinButton,
    Switch,
    Tab,
    TabList,
    Timer,
    ToolBar,
    List, // RNW extension
    ListItem, // RNW extension
    Unknown, // Catch-all
    CountRoles
  };

  enum AccessibilityStates
  {
    Selected = 0,
    Disabled,
    Checked,
    Unchecked,
    Busy,
    Expanded,
    Collapsed,
    CountStates
  };

  delegate void AccessibilityInvokeEventHandler();
  delegate void AccessibilityActionEventHandler(AccessibilityAction action);

  [default_interface]
  [webhosthidden]
  runtimeclass DynamicAutomationProperties
  {
    // Attached Properties
    static XAML_NAMESPACE.DependencyProperty AccessibilityRoleProperty { get; };
    static void SetAccessibilityRole(XAML_NAMESPACE.UIElement element, AccessibilityRoles value);
    static AccessibilityRoles GetAccessibilityRole(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateSelectedProperty { get; };
    static void SetAccessibilityStateSelected(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateSelected(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateDisabledProperty { get; };
    static void SetAccessibilityStateDisabled(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateDisabled(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateCheckedProperty { get; };
    static void SetAccessibilityStateChecked(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateChecked(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateUncheckedProperty { get; };
    static void SetAccessibilityStateUnchecked(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateUnchecked(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateBusyProperty { get; };
    static void SetAccessibilityStateBusy(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateBusy(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateExpandedProperty { get; };
    static void SetAccessibilityStateExpanded(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateExpanded(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityStateCollapsedProperty { get; };
    static void SetAccessibilityStateCollapsed(XAML_NAMESPACE.UIElement element, Boolean value);
    static Boolean GetAccessibilityStateCollapsed(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityInvokeEventHandlerProperty { get; };
    static void SetAccessibilityInvokeEventHandler(XAML_NAMESPACE.UIElement element, AccessibilityInvokeEventHandler value);
    static AccessibilityInvokeEventHandler GetAccessibilityInvokeEventHandler(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityActionsProperty { get; };
    static void SetAccessibilityActions(XAML_NAMESPACE.UIElement element, Windows.Foundation.Collections.IVector<PROJECT_ROOT_NAMESPACE.AccessibilityAction> value);
    static Windows.Foundation.Collections.IVector<PROJECT_ROOT_NAMESPACE.AccessibilityAction> GetAccessibilityActions(XAML_NAMESPACE.UIElement element);

    static XAML_NAMESPACE.DependencyProperty AccessibilityActionEventHandlerProperty { get; };
    static void SetAccessibilityActionEventHandler(XAML_NAMESPACE.UIElement element, AccessibilityActionEventHandler value);
    static AccessibilityActionEventHandler GetAccessibilityActionEventHandler(XAML_NAMESPACE.UIElement element);
  }

  [default_interface]
  [webhosthidden]
  runtimeclass DynamicAutomationPeer :
    XAML_NAMESPACE.Automation.Peers.FrameworkElementAutomationPeer,
    XAML_NAMESPACE.Automation.Provider.IInvokeProvider,
    XAML_NAMESPACE.Automation.Provider.ISelectionProvider,
    XAML_NAMESPACE.Automation.Provider.ISelectionItemProvider,
    XAML_NAMESPACE.Automation.Provider.IToggleProvider,
    XAML_NAMESPACE.Automation.Provider.IExpandCollapseProvider
  {
    DynamicAutomationPeer(XAML_NAMESPACE.FrameworkElement owner);
  }
}
