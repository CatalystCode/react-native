/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * @format
 */
// @ts-check

const execSync = require('child_process').execSync;
const path = require('path');
const fs = require('fs');

async function autoLinkConfig() {
  const execString =
    'react-native config';
  let output;
  try {
    console.log('Running react-natice config...');
    output = execSync(execString).toString();
    const config = JSON.parse(output);

    const cppProjFile= config['project']['windows'].cppProjFile;
    if (cppProjFile == null){
      console.log('AutoLink currently only supports cpp/winrt main project.');
      return;
    }
    console.log('cppProjFile:' + cppProjFile);

    const sourceDir = config['project']['windows'].sourceDir;
    console.log('sourceDir:' + sourceDir);

    const projectName = config['project']['windows'].projectName;
    console.log('projectName:' + projectName);
    
    //#1. update nativeModules.g.h
    const generatedHeader =  path.join(sourceDir, projectName, 'nativeModules.g.h');
    if (!fs.existsSync(generatedHeader))
    {
      console.log('autoLink can not locate generated header file:' + generatedHeader);
      return;
    }

    var generatedIncludes = '// NativeModules.g.h -- contents generated by "react-native run-windows"';
    const dependencies = config['dependencies'];
    var packageRegistrations = '#define RegisterNativeModulePackages';
    for(const dependency in dependencies) {
      const windowDependency = dependencies[dependency]['platforms']['windows'];
      const cppProjFile = windowDependency.cppProjFile;
      if (cppProjFile == null)
      {
        console.log('No cpp/winrt project found for ' + dependency);
        continue;  
      }
      const trimmedPackageName = windowDependency.packageName.trim();
      
      const includeStatement = '\r\n#include ' + '<winrt/' + trimmedPackageName + '.h>';
      generatedIncludes += includeStatement;

      const packageRegistration = ' \\\r\n' + '    PackageProviders().Append(winrt::' + trimmedPackageName + '::ReactPackageProvider());';
      packageRegistrations += packageRegistration;
   }
   const contents = generatedIncludes + '\r\n' + packageRegistrations;
   fs.writeFileSync(generatedHeader,contents,{encoding:'utf8',flag:'w'})
    //#2. Update project file to add references to native module packages

    //#3. Update solution file to include native module project files

    return;
  } catch (e) {
    console.log("Parsing react-native config failed!");
    return;
  }
}

module.exports = {
  autoLinkConfig,
};
