// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IReactDispatcher.idl";
import "IReactPropertyBag.idl";

#include "DocString.h"

namespace Microsoft.ReactNative {

  // A subscription to a notification.
  // The subscription is removed when this object is deleted or the Unsubscribe method is called.
  [webhosthidden]
  DOC_STRING("A subscription to a notification. The subscription is removed when this object is deleted or the [`Unsubscribe`](#Unsubscribe) method is called.")
  interface IReactNotificationSubscription
  {
    // Name of the notification.
    DOC_STRING("Name of the notification.")
    IReactPropertyName NotificationName { get; };

    // The IReactDispatcher provided when the notification subscription created.
    // All notifications will be handled using this dispatcher.
    DOC_STRING("The [`IReactDispatcher`](IReactDispatcher.md) provided when the notification subscription created. All notifications will be handled using this dispatcher.")
    IReactDispatcher Dispatcher { get; };

    // True if the subscription is still active.
    // This property is checked before notification handler is invoked.
    DOC_STRING("True if the subscription is still active. This property is checked before notification handler is invoked.")
    Boolean IsSubscribed { get; };

    // Remove the subscription.
    // Because of the multi-threaded nature of the notifications, the handler can be still called
    // after the Unsubscribe method called if the IsSubscribed property is already checked.
    // Consider calling the Unsubscribe method and the handler in the same IReactDispatcher
    // to ensure that no handler is invoked after the Unsubscribe method call.
    DOC_STRING("Remove the subscription. Because of the multi-threaded nature of the notifications, the handler can be still called \
after the Unsubscribe method called if the IsSubscribed property is already checked. \
Consider calling the Unsubscribe method and the handler in the same [`IReactDispatcher`](IReactDispatcher.md) \
to ensure that no handler is invoked after the Unsubscribe method call.")
    void Unsubscribe();
  }

  // Notification args provided to the notification handler.
  [webhosthidden]
  interface IReactNotificationArgs
  {
    // The notification subscription that can be used to unsubscribe in the notification handler.
    // It also has the name and dispatcher associated with the notification.
    IReactNotificationSubscription Subscription { get; };

    // The data sent with the notification. It can be any WinRT type.
    // Consider using IReactPropertyBag for semi-structured data.
    // It can be null if notification has no data.
    Object Data { get; };
  }

  // Delegate to handle notifications.
  // The sender parameter is the object that sent the notification. It can be null.
  // The args contain the notification-specific data and the notification subscription.
  [webhosthidden]
  delegate void ReactNotificationHandler(Object sender, IReactNotificationArgs args);

  // The notification service is used to subscribe to notifications and to send notifications.
  [webhosthidden]
  DOC_STRING("The notification service is used to subscribe to notifications and to send notifications")
  interface IReactNotificationService
  {
    // Subscribe to a notification.
    // The notificationName as a property name can belong to a specific namespace. It must be not null.
    // The dispatcher is used to call notification handlers. If it is null, then handler is called synchronously.
    // The handler is a delegate that can be implemented as a lambda to handle notifications.
    // The method returns IReactNotificationSubscription that must be kept alive while the subscription
    // is active. The subscription is removed when the IReactNotificationSubscription is destroyed.
    DOC_STRING("Subscribe to a notification. \
    The `notificationName` is a non-null property name and can belong to a specific namespace. \n\
    The dispatcher is used to call notification handlers. If it is null, then the handler is called synchronously. \
    The handler is a delegate that can be implemented as a lambda to handle notifications. \
    The method returns a [`IReactNotificationSubscription`](IReactNotificationSubscription.md) that must be kept alive while the subscription \
    is active. The subscription is removed when the [`IReactNotificationSubscription`](IReactNotificationSubscription.md) is destroyed.")
    IReactNotificationSubscription Subscribe(
      IReactPropertyName notificationName, IReactDispatcher dispatcher, ReactNotificationHandler handler);

    // Send the notification with notificationName.
    // The sender is the object that sends notification. It can be null.
    // The data is the data associated with the notification. It can be null.
    // Consider using IReactPropertyBag for sending semi-structured data. It can be created
    // using the ReactPropertyBagHelper.CreatePropertyBag method.
    DOC_STRING("Send the notification with `notificationName`. The sender is the object that sends notification and can be null. The `data` is the data \
associated with the notification and can be null. Consider using [`IReactPropertyBag`](IReactPropertyBag.md) for sending semi-structured data. \
It can be created using the [`ReactPropertyBagHelper.CreatePropertyBag`](ReactPropertyBagHelper.md#CreatePropertyBag) method.")
    void SendNotification(IReactPropertyName notificationName, Object sender, Object data);
  }

  // Helper methods for the notification service implementation.
  [webhosthidden]
  DOC_STRING("Helper methods for the notification service implementation.")
  static runtimeclass ReactNotificationServiceHelper
  {
    // Create new instance of IReactNotificationService
    DOC_STRING("Create new instance of IReactNotificationService")
    static IReactNotificationService CreateNotificationService();
  }
} // namespace Microsoft.ReactNative
