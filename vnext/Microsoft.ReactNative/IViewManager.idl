// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import "IReactModuleBuilder.idl";
import "IReactContext.idl";

#include "../Include/NamespaceRedirect.h"

namespace Microsoft.ReactNative
{
  [webhosthidden]
  enum ViewManagerPropertyType
  {
    Boolean,
    Number,
    String,
    Array,
    Map,
    Color,
  };

  [webhosthidden]
  interface IViewManager
  {
    String Name { get; };

    WUXMUX_TYPE(FrameworkElement) CreateView();
  }

  [webhosthidden]
  interface IViewManagerWithReactContext
  {
    IReactContext ReactContext { get; set; };
  }

  [webhosthidden]
  interface IViewManagerWithExportedViewConstants
  {
    ConstantProviderDelegate ExportedViewConstants { get; };
  }

  [webhosthidden]
  interface IViewManagerWithNativeProperties
  {
    IMapView<String, ViewManagerPropertyType> NativeProps { get; };

    void UpdateProperties(WUXMUX_TYPE(FrameworkElement) view, IJSValueReader propertyMapReader);
  }

  [webhosthidden]
  interface IViewManagerWithCommands
  {
    IVectorView<String> Commands { get; };

    void DispatchCommand(WUXMUX_TYPE(FrameworkElement) view, String commandId, IJSValueReader commandArgsReader);
  }

  [webhosthidden]
  interface IViewManagerWithExportedEventTypeConstants
  {
    ConstantProviderDelegate ExportedCustomBubblingEventTypeConstants { get; };

    ConstantProviderDelegate ExportedCustomDirectEventTypeConstants { get; };
  }

  [webhosthidden]
  interface IViewManagerWithChildren
  {
    void AddView(WUXMUX_TYPE(FrameworkElement) parent, WUXMUX_TYPE(UIElement) child, Int64 index);

    void RemoveAllChildren(WUXMUX_TYPE(FrameworkElement) parent);

    void RemoveChildAt(WUXMUX_TYPE(FrameworkElement) parent, Int64 index);

    void ReplaceChild(WUXMUX_TYPE(FrameworkElement) parent, WUXMUX_TYPE(UIElement) oldChild, WUXMUX_TYPE(UIElement) newChild);
  }
} // namespace Microsoft.ReactNative
