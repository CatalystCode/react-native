// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace Microsoft.ReactNative
{
  interface IJsiRuntime;

  delegate void JsiDataHandler(UInt8[] data);

  [webhosthidden]
  interface IJsiBuffer
  {
    UInt32 Size { get; };
    void GetData(JsiDataHandler handler);
  };

  enum JsiValueKind
  {
    Undefined,
    Null,
    Boolean,
    Number,
    Symbol,
    String,
    Object,
  };

  [webhosthidden]
  struct JsiValueData
  {
    JsiValueKind Kind;
    UInt64 Data;
  };

  struct JsiSymbolData
  {
    UInt64 Data;
  };

  struct JsiStringData
  {
    UInt64 Data;
  };

  struct JsiObjectData
  {
    UInt64 Data;
  };

  struct JsiWeakObjectData
  {
    UInt64 Data;
  };

  struct JsiPropertyNameIdData
  {
    UInt64 Data;
  };

  struct JsiFunctionData
  {
    UInt64 Data;
  };

  struct JsiArrayData
  {
    UInt64 Data;
  };

  struct JsiArrayBufferData
  {
    UInt64 Data;
  };

  struct JsiScopeState
  {
    UInt64 Data;
  };

  [default_interface]
  runtimeclass JsiPreparedJavaScript
  {
  };

  delegate JsiValueData JsiHostFunction(IJsiRuntime runtime, JsiValueData thisArg, JsiValueData[] args);

  [webhosthidden]
  interface IJsiHostObject
  {
    JsiValueData GetProperty(IJsiRuntime runtime, JsiPropertyNameIdData name);
    void SetProperty(IJsiRuntime runtime, JsiPropertyNameIdData name, JsiValueData value);
    IVector<JsiPropertyNameIdData> GetPropertyNames(IJsiRuntime runtime);
  };

  [webhosthidden]
  interface IJsiRuntime
  {
    JsiValueData EvaluateJavaScript(IJsiBuffer buffer, String sourceUrl);
    JsiPreparedJavaScript PrepareJavaScript(IJsiBuffer buffer, String sourceUrl);
    JsiValueData EvaluatePreparedJavaScript(JsiPreparedJavaScript js);
    JsiObjectData Global { get; };
    String Description { get; };
    Boolean IsInspectable { get; };

    JsiSymbolData CloneSymbol(JsiSymbolData symbol);
    JsiStringData CloneString(JsiStringData str);
    JsiObjectData CloneObject(JsiObjectData obj);
    JsiPropertyNameIdData ClonePropertyNameId(JsiPropertyNameIdData propertyNameId);

    JsiPropertyNameIdData CreatePropertyNameIdFromAscii(UInt8[] ascii);
    JsiPropertyNameIdData CreatePropertyNameIdFromUtf8(UInt8[] utf8);
    JsiPropertyNameIdData CreatePropertyNameIdFromString(JsiStringData str);
    void PropertyNameIdToUtf8(JsiPropertyNameIdData propertyNameId, JsiDataHandler utf8Handler);
    Boolean PropertyNameIdEquals(JsiPropertyNameIdData left, JsiPropertyNameIdData right);

    void SymbolToUtf8(JsiSymbolData symbol, JsiDataHandler utf8Handler);

    JsiStringData CreateStringFromAscii(UInt8[] ascii);
    JsiStringData CreateStringFromUtf8(UInt8[] utf8);
    void StringToUtf8(JsiStringData str, JsiDataHandler utf8Handler);

    JsiValueData CreateValueFromJsonUtf8(UInt8[] json);

    JsiObjectData CreateObject();
    JsiObjectData CreateObjectWithHostObject(IJsiHostObject hostObject);
    IJsiHostObject GetHostObject(JsiObjectData obj);
    JsiHostFunction GetHostFunction(JsiFunctionData func);

    JsiValueData GetPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId);
    JsiValueData GetPropertyByName(JsiObjectData obj, JsiStringData name);
    Boolean HasPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId);
    Boolean HasPropertyByName(JsiObjectData obj, JsiStringData name);
    void SetPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId, JsiValueData value);
    void SetPropertyByName(JsiObjectData obj, JsiStringData name, JsiValueData value);

    Boolean IsArray(JsiObjectData obj);
    Boolean IsArrayBuffer(JsiObjectData obj);
    Boolean IsFunction(JsiObjectData obj);
    Boolean IsHostObject(JsiObjectData obj);
    Boolean IsHostFunction(JsiFunctionData obj);
    JsiArrayData GetPropertyNames(JsiObjectData obj);

    JsiWeakObjectData CreateWeakObject(JsiObjectData obj);
    JsiValueData LockWeakObject(JsiWeakObjectData weakObject);

    JsiArrayData CreateArray(UInt32 size);
    UInt32 GetArraySize(JsiArrayData arr);
    UInt32 GetArrayBufferSize(JsiArrayBufferData arrayBuffer);
    void GetArrayBufferData(JsiArrayBufferData arrayBuffer, JsiDataHandler dataHandler);
    JsiValueData GetValueAtIndex(JsiArrayData arr, UInt32 index);
    void SetValueAtIndex(JsiArrayData arr, UInt32 index, JsiValueData value);

    JsiFunctionData CreateFunctionFromHostFunction(JsiPropertyNameIdData propNameId, UInt32 paramCount, JsiHostFunction hostFunc);
    JsiValueData Call(JsiFunctionData func, JsiValueData thisArg, JsiValueData[] args);
    JsiValueData CallAsConstructor(JsiFunctionData func, JsiValueData[] args);

    JsiScopeState PushScope();
    void PopScope(JsiScopeState scopeState);

    Boolean SymbolStrictEquals(JsiSymbolData left, JsiSymbolData right);
    Boolean StringStrictEquals(JsiStringData left, JsiStringData right);
    Boolean ObjectStrictEquals(JsiObjectData left, JsiObjectData right);

    Boolean InstanceOf(JsiObjectData obj, JsiFunctionData constructor);

    void ReleaseSymbol(JsiSymbolData symbol);
    void ReleaseString(JsiStringData str);
    void ReleaseObject(JsiObjectData obj);
    void ReleasePropertyNameId(JsiPropertyNameIdData propertyNameId);
  };
}
