// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace Microsoft.ReactNative
{
  interface IJsiRuntime;

  // JsiByteArrayUser delegate receives a range of bytes as a byte array.
  // The array of bytes is implemented in ABI as two parameters: array length and a pointer to the array start.
  // It effectively provides a 'view' to the byte array provided by the delegate invoker.
  // This delegate helps returning byte array data without copying it.
  // The decision to copy data is deferred to the code that implements the delegate.
  //
  // Note that the provided byte array is only valid while the delegate is called. Your code must
  // copy data if it wants to store it for the later use. Otherwise it may cause issues due to the memory
  // being overwritten after the call is completed. It may happen if the provided byte array was stored
  // on the call stack or it was a managed memory pinned for the use and then unpinned after that.
  delegate void JsiByteArrayUser(UInt8[] bytes);

  // IJsiByteBuffer encapsulates a byte array buffer.
  // It can be in-memory data, memory-mapped file, or a resource from a DLL.
  // IJsiByteBuffer::GetData provides ABI-safe access to the encapsulated data with help of the
  // JsiByteArrayUser delegate. The JsiByteArrayUser delegate provides a 'view' to the buffer data and
  // does not copy the data.
  //
  // Note that the IJsiByteBuffer::GetData implementation could do some work before and after calling the
  // JsiByteArrayUser delegate. For example, .Net implementation must pin the memory before the JsiByteArrayUser
  // delegate call and unpin it after that. It means that the provided data is only valid while the
  // JsiByteArrayUser delegate is being called.
  [webhosthidden]
  interface IJsiByteBuffer
  {
    // Size of the byte buffer data.
    UInt32 Size { get; };

    // Get access to the byte buffer data.
    void GetData(JsiByteArrayUser useBytes);
  };

  // Type of the JavaScript value. It is currently matching the full JavaScript set of types except for the BigInt type.
  enum JsiValueKind
  {
    Undefined,
    Null,
    Boolean,
    Number,
    Symbol,
    String,
    Object,
  };

  [webhosthidden]
  struct JsiValueData
  {
    JsiValueKind Kind;
    UInt64 Data;
  };

  struct JsiSymbolData
  {
    UInt64 Data;
  };

  struct JsiStringData
  {
    UInt64 Data;
  };

  struct JsiObjectData
  {
    UInt64 Data;
  };

  struct JsiWeakObjectData
  {
    UInt64 Data;
  };

  struct JsiPropertyNameIdData
  {
    UInt64 Data;
  };

  struct JsiFunctionData
  {
    UInt64 Data;
  };

  struct JsiArrayData
  {
    UInt64 Data;
  };

  struct JsiArrayBufferData
  {
    UInt64 Data;
  };

  struct JsiScopeState
  {
    UInt64 Data;
  };

  [default_interface]
  runtimeclass JsiPreparedJavaScript
  {
  };

  delegate JsiValueData JsiHostFunction(JsiRuntime runtime, JsiValueData thisArg, JsiValueData[] args);

  [webhosthidden]
  interface IJsiHostObject
  {
    JsiValueData GetProperty(JsiRuntime runtime, JsiPropertyNameIdData name);
    void SetProperty(JsiRuntime runtime, JsiPropertyNameIdData name, JsiValueData value);
    IVector<JsiPropertyNameIdData> GetPropertyNames(JsiRuntime runtime);
  };

  [webhosthidden, default_interface]
  runtimeclass JsiRuntime
  {
    static JsiRuntime MakeChakraRuntime();

    JsiValueData EvaluateJavaScript(IJsiByteBuffer buffer, String sourceUrl);
    JsiPreparedJavaScript PrepareJavaScript(IJsiByteBuffer buffer, String sourceUrl);
    JsiValueData EvaluatePreparedJavaScript(JsiPreparedJavaScript js);
    JsiObjectData Global { get; };
    String Description { get; };
    Boolean IsInspectable { get; };

    JsiSymbolData CloneSymbol(JsiSymbolData symbol);
    JsiStringData CloneString(JsiStringData str);
    JsiObjectData CloneObject(JsiObjectData obj);
    JsiPropertyNameIdData ClonePropertyNameId(JsiPropertyNameIdData propertyNameId);

    JsiPropertyNameIdData CreatePropertyNameIdFromAscii(UInt8[] ascii);
    JsiPropertyNameIdData CreatePropertyNameIdFromUtf8(UInt8[] utf8);
    JsiPropertyNameIdData CreatePropertyNameIdFromString(JsiStringData str);
    void PropertyNameIdToUtf8(JsiPropertyNameIdData propertyNameId, JsiByteArrayUser useUtf8String);
    Boolean PropertyNameIdEquals(JsiPropertyNameIdData left, JsiPropertyNameIdData right);

    void SymbolToUtf8(JsiSymbolData symbol, JsiByteArrayUser useUtf8String);

    JsiStringData CreateStringFromAscii(UInt8[] ascii);
    JsiStringData CreateStringFromUtf8(UInt8[] utf8);
    void StringToUtf8(JsiStringData str, JsiByteArrayUser useUtf8String);

    JsiValueData CreateValueFromJsonUtf8(UInt8[] json);

    JsiObjectData CreateObject();
    JsiObjectData CreateObjectWithHostObject(IJsiHostObject hostObject);
    IJsiHostObject GetHostObject(JsiObjectData obj);
    JsiHostFunction GetHostFunction(JsiFunctionData func);

    JsiValueData GetPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId);
    JsiValueData GetPropertyByName(JsiObjectData obj, JsiStringData name);
    Boolean HasPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId);
    Boolean HasPropertyByName(JsiObjectData obj, JsiStringData name);
    void SetPropertyById(JsiObjectData obj, JsiPropertyNameIdData propertyNameId, JsiValueData value);
    void SetPropertyByName(JsiObjectData obj, JsiStringData name, JsiValueData value);

    Boolean IsArray(JsiObjectData obj);
    Boolean IsArrayBuffer(JsiObjectData obj);
    Boolean IsFunction(JsiObjectData obj);
    Boolean IsHostObject(JsiObjectData obj);
    Boolean IsHostFunction(JsiFunctionData obj);
    JsiArrayData GetPropertyNames(JsiObjectData obj);

    JsiWeakObjectData CreateWeakObject(JsiObjectData obj);
    JsiValueData LockWeakObject(JsiWeakObjectData weakObject);

    JsiArrayData CreateArray(UInt32 size);
    UInt32 GetArraySize(JsiArrayData arr);
    UInt32 GetArrayBufferSize(JsiArrayBufferData arrayBuffer);
    void GetArrayBufferData(JsiArrayBufferData arrayBuffer, JsiByteArrayUser useArrayBytes);
    JsiValueData GetValueAtIndex(JsiArrayData arr, UInt32 index);
    void SetValueAtIndex(JsiArrayData arr, UInt32 index, JsiValueData value);

    JsiFunctionData CreateFunctionFromHostFunction(JsiPropertyNameIdData propNameId, UInt32 paramCount, JsiHostFunction hostFunc);
    JsiValueData Call(JsiFunctionData func, JsiValueData thisArg, JsiValueData[] args);
    JsiValueData CallAsConstructor(JsiFunctionData func, JsiValueData[] args);

    JsiScopeState PushScope();
    void PopScope(JsiScopeState scopeState);

    Boolean SymbolStrictEquals(JsiSymbolData left, JsiSymbolData right);
    Boolean StringStrictEquals(JsiStringData left, JsiStringData right);
    Boolean ObjectStrictEquals(JsiObjectData left, JsiObjectData right);

    Boolean InstanceOf(JsiObjectData obj, JsiFunctionData constructor);

    void ReleaseSymbol(JsiSymbolData symbol);
    void ReleaseString(JsiStringData str);
    void ReleaseObject(JsiObjectData obj);
    void ReleasePropertyNameId(JsiPropertyNameIdData propertyNameId);
  };
}
