// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ReactNative.CodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ReactPackageGenerator : ReactPackageGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("//\r\n// This file is generated by ReactPackageGenerator.tt\r\n//\r\n// Copyright (c) M" +
                    "icrosoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n" +
                    "//\r\n");
            
            #line 12 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

var packageFullName = _metadata.Value<string>("name");
var index = packageFullName.LastIndexOf(".");
var packageNamespace = packageFullName.Substring(0, index);
var packageName = packageFullName.Substring(index + 1);

            
            #line default
            #line hidden
            this.Write("using ReactNative.Bridge;\r\nusing ReactNative.Modules.Core;\r\nusing ReactNative.UIM" +
                    "anager;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ");
            
            #line 23 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    class Generated");
            
            #line 25 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageName));
            
            #line default
            #line hidden
            this.Write(" : IReactPackage\r\n    {\r\n        private readonly IReactPackage _reactPackage;\r\n\r" +
                    "\n        public Generated");
            
            #line 29 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageName));
            
            #line default
            #line hidden
            this.Write(@"(IReactPackage reactPackage)
        {
            _reactPackage = reactPackage;
        }

        public IReadOnlyList<INativeModule> CreateNativeModules(ReactContext reactContext)
        {
            var nativeModules = _reactPackage.CreateNativeModules(reactContext);
            return new List<INativeModule>
            {
");
            
            #line 39 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

var modules = _metadata["modules"];
var moduleCount = modules.Count();
for (var i = 0; i < moduleCount; ++i)
{
    var module = modules[i];
    var moduleFullName = module.Value<string>("name");
    var moduleName = moduleFullName.Substring(moduleFullName.LastIndexOf(".") + 1);

            
            #line default
            #line hidden
            this.Write("                new ");
            
            #line 48 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleName));
            
            #line default
            #line hidden
            this.Write("Wrapper((");
            
            #line 48 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleFullName));
            
            #line default
            #line hidden
            this.Write(")nativeModules[");
            
            #line 48 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("]),\r\n");
            
            #line 49 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("            };\r\n        }\r\n\r\n        public IReadOnlyList<IViewManager> CreateVie" +
                    "wManagers(ReactContext reactContext)\r\n        {\r\n            return _reactPackag" +
                    "e.CreateViewManagers(reactContext);\r\n        }\r\n");
            
            #line 59 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

for (var i = 0; i < moduleCount; ++i)
{
    var module = modules[i];
    var moduleFullName = module.Value<string>("name");
    var moduleName = moduleFullName.Substring(moduleFullName.LastIndexOf(".") + 1);

            
            #line default
            #line hidden
            this.Write("        class ");
            
            #line 66 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleName));
            
            #line default
            #line hidden
            this.Write("Wrapper : NativeModuleWrapperBase<");
            
            #line 66 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleFullName));
            
            #line default
            #line hidden
            this.Write(">\r\n        {\r\n            public ");
            
            #line 68 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleName));
            
            #line default
            #line hidden
            this.Write("Wrapper(");
            
            #line 68 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleFullName));
            
            #line default
            #line hidden
            this.Write(@" nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
");
            
            #line 79 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

    foreach (var method in module["methods"])
    {
        var methodName = method.Value<string>("name");
        var methodType = method.Value<string>("type");

            
            #line default
            #line hidden
            this.Write("                        {\r\n                            nameof(");
            
            #line 86 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleFullName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 86 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("),\r\n                            new NativeMethod(\"");
            
            #line 87 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodType));
            
            #line default
            #line hidden
            this.Write("\", (instance, args) =>\r\n                                Module.");
            
            #line 88 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 89 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

        var parameters = method["parameters"];
        var parameterCount = parameters.Count();
        for (var j = 0; j < parameterCount; ++j)
        {
            var comma = j < (parameterCount - 1) ? "," : "";
            var parameter = parameters[j];
            var kind = parameter.Value<string>("kind");
            if (kind == "json")
            {
                var type = parameter.Value<string>("type");

            
            #line default
            #line hidden
            this.Write("                                    (");
            
            #line 101 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write(")args[");
            
            #line 101 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 101 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 102 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

            }
            else if (kind == "callback")
            {

            
            #line default
            #line hidden
            this.Write("                                    new Callback(args[");
            
            #line 107 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write("].ToObject<int>(), instance)");
            
            #line 107 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 108 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

            }
            else if (kind == "promise")
            {

            
            #line default
            #line hidden
            this.Write("                                    new Promise(\r\n                               " +
                    "         new Callback(args[");
            
            #line 114 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write("].ToObject<int>(), instance),\r\n                                        new Callba" +
                    "ck(args[");
            
            #line 115 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j + 1));
            
            #line default
            #line hidden
            this.Write("].ToObject<int>(), instance)\r\n                                    )");
            
            #line 116 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 117 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

            }
            else if (kind == "nullable")
            {
                var type = parameter.Value<string>("type");

            
            #line default
            #line hidden
            this.Write("                                    args[");
            
            #line 123 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write("].ToObject<");
            
            #line 123 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("?>()");
            
            #line 123 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 124 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

            }
            else
            {
                var type = parameter.Value<string>("type");

            
            #line default
            #line hidden
            this.Write("                                    args[");
            
            #line 130 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write("].ToObject<");
            
            #line 130 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write(">()");
            
            #line 130 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 131 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("                                )\r\n                            )\r\n               " +
                    "         },\r\n");
            
            #line 138 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

    }

            
            #line default
            #line hidden
            this.Write("                    };\r\n                }\r\n            }\r\n        }\r\n");
            
            #line 145 "C:\src\react-native-windows\ReactWindows\ReactNative.CodeGen\ReactPackageGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ReactPackageGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
