#
parameters:
  name: ''
  pool:
  BuildPlatform: x86 # ARM, x86, x64
  UseRNFork: true
  vsComponents: ''
  vsInstallerUri: 'https://download.visualstudio.microsoft.com/download/pr/c4fef23e-cc45-4836-9544-70e213134bc8/1ee5717e9a1e05015756dff77eb27d554a79a6db91f2716d836df368381af9a1/vs_Enterprise.exe'

jobs:
  - job: ${{ parameters.name }}
    displayName: E2E Test
    dependsOn: Setup
    condition: ne( dependencies.Setup.outputs['checkPayload.shouldSkipPRBuild'], 'True' )
    pool: ${{ parameters.pool }}
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self
        clean: false
        submodules: false

      - template: prepare-env.yml
        parameters:
          useRnFork: ${{ parameters.UseRNFork }}
          vsComponents: ${{ parameters.vsComponents }}
          yarnBuildCmd: build
          vsInstallerUri: ${{ parameters.vsInstallerUri }}
          forceVSDependencies: true

      - task: CmdLine@2
        displayName: Install react-native-cli
        inputs:
          script: npm install -g react-native-cli

      - task: NuGetCommand@2
        displayName: NuGet restore - ReactUWPTestApp
        inputs:
          command: restore
          restoreSolution: packages/E2ETest/windows/ReactUWPTestApp.sln
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: PowerShell@2
        displayName: Install MUX framework package
        inputs:
          targetType: "inline"
          script:  Add-AppxPackage -path $(Build.SourcesDirectory)/packages/E2ETest/windows/packages/Microsoft.UI.Xaml.2.3.191129002/tools/AppX/${{ parameters.BuildPlatform }}/Release/Microsoft.UI.Xaml.2.3.appx

      - task: CmdLine@2
        displayName: Create bundle
        inputs:
          script: yarn run bundle
          workingDirectory: packages/E2ETest
          
      - task: CmdLine@2
        displayName: run-windows
        inputs:
          script: react-native run-windows --no-packager --arch ${{ parameters.BuildPlatform }} --release --logging
          workingDirectory: packages/E2ETest

      - task: PublishBuildArtifacts@1
        condition:  succeededOrFailed()
        timeoutInMinutes: 10
        inputs:    
          pathtoPublish: packages/E2ETest/msbuild.binlog 
          artifactName: 'ReactUWPTestApp build log' 
          publishLocation: 'Container'

      - task: CopyFiles@2
        displayName: Copy ReactUWPTestApp artifacts
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/packages/E2ETest/windows/ReactUWPTestApp
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestApp
          contents: AppPackages\**
        condition: succeededOrFailed()

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact:ReactUWPTestApp"
        inputs:
          artifactName: ReactUWPTestApp
          pathtoPublish: $(Build.StagingDirectory)/ReactUWPTestApp
        condition: succeededOrFailed()

      # Wait for app to launch. A workaround to avoid WinAppDriver error: Failed to locate opened application window with appId
      - task: PowerShell@2
        displayName: Wait for app to launch
        inputs:
          targetType: inline # filePath | inline
          script: |
            Start-Sleep -Seconds 30

      - task: PowerShell@2
        displayName: 'Check TestApp'
        inputs:
          targetType: 'inline'
          script: 'if ((Get-Process React*) -eq $Null) { echo "TestApp is not running"; exit 1}'

      - task: CmdLine@2
        displayName: run test
        inputs:
          script: yarn run test
          workingDirectory: packages/E2ETest

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "packages/E2ETest/reports/*.log"
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "Show appium log"
        inputs:
          targetType: "inline"
          script: "Get-Content packages/E2ETest/reports/appium.txt | foreach {Write-Output $_}"
        condition: failed()
