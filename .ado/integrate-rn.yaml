trigger: none
pr: none

parameters:
- name: reactNativeVersion
  displayName: React Native Version
  type: string

variables:
  - template: variables/vs2019.yml
  - group: RNW Secrets

pool:
  vmImage: $(VmImage)

jobs:
  - job: IntegrateRN
    displayName: Integrate React Native
    timeoutInMinutes: 30

    steps:
      - checkout: self
        clean: true
        submodules: false

      - template: templates/configure-git.yml

      - template: templates/yarn-install.yml

      - script: yarn build
        displayName: yarn build

      - script: git checkout -b integrate-${{ parameters.reactNativeVersion }} origin/master
        displayName: Create a new branch

      - script: yarn integrate-rn ${{ parameters.reactNativeVersion }} --reportPath $(Agent.TempDirectory)/integraton-report.md --color
        displayName: Run Integration Script
        continueOnError: true

      - powershell: |
          if (!(Test-Path $(Agent.TempDirectory)/integration-report.md)) {
            throw "No integration report generated"
          }
          if ((git status --porcelain).length -eq 0) {
            throw "No changes found"
          }
        displayName: Test for changes
        
      - powershell: |
          $ reportWithHeader = 'Integrate react-native ${{ parameters.reactNativeVersion }}`n`n' + (Get-Content -Raw $(Agent.TempDirectory)/integraton-report.md))
          # Trim to max GitHub PR length
          $trimmedReport = $reportWithHeader.substring(0, 65536)
          Set-Content $(Agent.TempDirectory)/commit-message.md -Value $trimmedReport
        displayName: Generate commit message

      - script: |
          git add --all
          git commit -F $(Agent.TempDirectory)/commit-message.md
        displayName: Commit changes
      
      - powershell: |
          $commitHash = git log --format=%H -n 1
          Write-Output "##vso[task.setvariable variable=FirstCommit]$commitHash"
        displayName: Save base commit
        
      - powershell: |
          $patchScope = node -e "
          const path = require('path');
          const {enumerateRepoPackages} = require('@react-native-windows/package-utils');

          const allowsPatch = async (pkg) => !pkg.json?.beachball?.disallowedChangeTypes.includes('patch');
          enumerateRepoPackages(allowsPatch)
            .then(pkgs => console.log(pkgs.map(pkg => path.relative('.', pkg.path)).join(' ')));
          "
          yarn change --scope $patchScope --message "Integrate react-native ${{ parameters.reactNativeVersion }}" --type patch
        displayName: Create patch changefiles

      - powershell: |
          $prereleaseScope = node -e "
          const path = require('path');
          const {enumerateRepoPackages} = require('@react-native-windows/package-utils');

          const allowsPrerelease = async (pkg) => !pkg.json?.beachball?.disallowedChangeTypes.includes('prerelease');
          enumerateRepoPackages(allowsPrerelease)
            .then(pkgs => console.log(pkgs.map(pkg => path.relative('.', pkg.path)).join(' ')));
          "
          yarn change --scope $prereleaseScope --message "Integrate react-native ${{ parameters.reactNativeVersion }}" --type prerelease
        displayName: Create prerelease changefiles

      - script: |
          git reset $(FirstCommit)
          git add --all
          git commit --amend -F $(Agent.TempDirectory)/commit-message.md
        displayName: Slip changefiles into original commit

      - script: git push origin integrate-${{ parameters.reactNativeVersion }}
        displayName: Push changes
