parameters:
  - name: buildEnvironment
    type: string
    default : PullRequest
    values: 
     - PullRequest 
     - Continuous 
   
jobs:
  - job: UniversalBuild
    variables:
      - template: ../variables/vs2019.yml
    displayName: Universal Build
    dependsOn:
     - Setup
    condition: ne( dependencies.Setup.outputs['checkPayload.shouldSkipPRBuild'], 'True' )
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          ArmDebug:
            BuildConfiguration: Debug
            BuildPlatform: ARM
        # End Continuous only
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: ARM
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          Arm64Debug:
            BuildConfiguration: Debug
            BuildPlatform: ARM64
          Arm64Release:
            BuildConfiguration: Release
            BuildPlatform: ARM64
          X64Debug:
            BuildConfiguration: Debug
            BuildPlatform: x64
        # End Continuous only
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          LayoutHeaders: true
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          X86Release:
            BuildConfiguration: Release
            BuildPlatform: x86
        # End Continuous only
    pool: windevbuildagents
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        clean: false
        submodules: false

      # - task: PowerShell@2
      #   displayName: "Check if this environment meets the development dependencies"
      #   inputs:
      #     targetType: filePath
      #     filePath: $(Build.SourcesDirectory)\vnext\Scripts\rnw-dependencies.ps1
      #     arguments: -NoPrompt -Tags buildLab

      - template: ../templates/build-rnw.yml
        parameters:
          yarnBuildCmd: build
          project: vnext/Microsoft.ReactNative.sln

      - task: PublishPipelineArtifact@1
        displayName: "Publish binaries for testing"
        inputs:
          targetPath: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          artifactName: "Universal-$(BuildPlatform)-$(BuildConfiguration)"

      - template: ../templates/publish-build-artifacts-for-nuget.yml
        parameters:
          artifactName: ReactWindows
          layoutHeaders: eq('true', variables.LayoutHeaders)
          contents: |
            Microsoft.ReactNative\**
            Microsoft.ReactNative.Managed\**
            Microsoft.ReactNative.Managed.CodeGen\**
      
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: 'Component Governance Detection'
        inputs:
          alertWarningLevel: Medium
          scanType: 'Register'

  - job: UniversalTest
    variables:
      - template: ../variables/vs2019.yml
    displayName: Universal Test
    dependsOn:
     - UniversalBuild
    condition: |
      and( 
        ne( dependencies.Setup.outputs['checkPayload.shouldSkipPRBuild'], 'True' ),
        in( dependencies.UniversalBuild.result, 'Succeeded', 'Skipped')
      )
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          ArmDebug:
            BuildConfiguration: Debug
            BuildPlatform: ARM
        # End Continuous only
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: ARM
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          Arm64Debug:
            BuildConfiguration: Debug
            BuildPlatform: ARM64
          Arm64Release:
            BuildConfiguration: Release
            BuildPlatform: ARM64
          X64Debug:
            BuildConfiguration: Debug
            BuildPlatform: x64
        # End Continuous only
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          LayoutHeaders: true
        # Start Continuous only
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          X86Release:
            BuildConfiguration: Release
            BuildPlatform: x86
        # End Continuous only
    # Note: The windev build agents have the enlistment on the c-drive, where the hosted agents have it on the d-drive
    # UWP Places absolute paths in some of the files, so we have to run the tests on the same layout of the drives we had build on.
    pool: windevbuildagents
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        clean: false
        submodules: false

      # - task: PowerShell@2
      #   displayName: "Check if this environment meets the development dependencies"
      #   inputs:
      #     targetType: filePath
      #     filePath: $(Build.SourcesDirectory)\vnext\Scripts\rnw-dependencies.ps1
      #     arguments: -NoPrompt -Tags buildLab
          
      - template: ../templates/prepare-env.yml
        parameters:
          yarnBuildCmd: build

      - powershell: |
          $RegistryKeyPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock"
          if (-not(Test-Path -Path $RegistryKeyPath)) {
              New-Item -Path $RegistryKeyPath -ItemType Directory -Force
          }
          $value = get-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -ErrorAction SilentlyContinue
          if (($value -eq $null) -or ($value.AllowDevelopmentWithoutDevLicense -ne 1)) {
              Set-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -Value 1 -ErrorAction Stop
          }
        displayName: Enable developer mode
          
      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          command: restore
          restoreSolution: vnext/Microsoft.ReactNative.sln
          feedsToUse: config
          nugetConfigPath: $(Build.SourcesDirectory)/vnext/NuGet.config
          restoreDirectory: packages/
          verbosityRestore: Detailed # Options: quiet, normal, detailed
          
      - task: DownloadPipelineArtifact@1
        displayName: "Download binaries for testing"
        inputs:
          targetPath: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          artifactName: "Universal-$(BuildPlatform)-$(BuildConfiguration)"

      - powershell: |
          Write-Debug "Using expression $($env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "##vso[task.setvariable variable=GoogleTestAdapterPath]$(Invoke-Expression $env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "Set environment variable to ($env:GoogleTestAdapterPath)"
        displayName: Set GoogleTestAdapterPath

      - task: VSTest@2
        displayName: Run Universal Unit Tests (Native)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Cxx.UnitTests/Microsoft.ReactNative.Cxx.UnitTests.exe
            Microsoft.ReactNative.IntegrationTests/Microsoft.ReactNative.IntegrationTests.exe
            Mso.UnitTests/Mso.UnitTests.exe
          pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), not(startsWith(variables.BuildPlatform, 'arm')))

      - task: VSTest@2
        displayName: Run Universal Unit Tests (UWP)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Managed.UnitTests/Microsoft.ReactNative.Managed.UnitTests/Microsoft.ReactNative.Managed.UnitTests.build.appxrecipe
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          codeCoverageEnabled: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), not(startsWith(variables.BuildPlatform, 'arm')))

      - task: VSTest@2
        displayName: Run Universal Unit Tests (NetCore)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Managed.CodeGen.UnitTests/Microsoft.ReactNative.Managed.CodeGen.UnitTests.dll
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          codeCoverageEnabled: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), eq(variables.BuildPlatform, 'x64'))
  