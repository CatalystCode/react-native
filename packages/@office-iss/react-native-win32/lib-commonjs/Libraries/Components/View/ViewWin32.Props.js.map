{"version":3,"file":"ViewWin32.Props.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/View/ViewWin32.Props.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAeb,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,2CAAI,CAAA;IACJ,qDAAS,CAAA;IACT,mDAAQ,CAAA;IACR,mDAAQ,CAAA;AACV,CAAC,EALW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAKrB","sourcesContent":["'use strict';\nimport React from 'react'\nimport RN = require('react-native');\n\n// removes from interface T the members of interface K\ntype Omit<T, K> = Pick<T, Exclude<keyof T, keyof K>>;\n\n// All of T becomes optional except for Keys\ntype PartiallyRequired<T, Keys extends keyof T = keyof T> = Pick<Partial<T>, Exclude<keyof T, Keys>> & Pick<T, Keys>;\n\n/**\n * All of TOrigin except Key from TUse\n */\nexport type UseFrom<TOrigin, TUse, Key extends keyof TUse> = Pick<TOrigin, Exclude<keyof TOrigin, Key>> & Pick<TUse, Key>;\n\nexport enum EventPhase {\n  None,\n  Capturing,\n  AtTarget,\n  Bubbling\n}\n\nexport interface INativeKeyboardEvent {\n  altKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  shiftKey: boolean;\n  key: string;\n  eventPhase: EventPhase;\n}\nexport type IKeyboardEvent = RN.NativeSyntheticEvent<INativeKeyboardEvent>;\nexport type IHandledKeyboardEvent = PartiallyRequired<INativeKeyboardEvent, 'key'>;\n\nexport interface IViewWin32 {\n  focus: () => void;\n}\n\nexport type ARIARole =\n  | 'alert'\n  | 'alertdialog'\n  | 'application'\n  | 'button'\n  | 'checkbox'\n  | 'combobox'\n  | 'dialog'\n  | 'group'\n  | 'link'\n  | 'menu'\n  | 'menubar'\n  | 'menuitem'\n  | 'none'\n  | 'presentation'\n  | 'progressbar'\n  | 'radio'\n  | 'radiogroup'\n  | 'scrollbar'\n  | 'search'\n  | 'spinbutton'\n  | 'switch'\n  | 'tab'\n  | 'tablist'\n  | 'tabpanel'\n  | 'textbox'\n  | 'timer'\n  | 'toolbar'\n  | 'tree'\n  | 'treeitem';\n\nexport type AnnotationType =\n  | 'AdvanceProofingIssue'\n  | 'Author'\n  | 'CircularReferenceError'\n  | 'Comment'\n  | 'ConflictingChange'\n  | 'DataValidationError'\n  | 'DeletionChange'\n  | 'EditingLockedChange'\n  | 'Endnote'\n  | 'ExternalChange'\n  | 'Footer'\n  | 'Footnote'\n  | 'FormatChange'\n  | 'FormulaError'\n  | 'GrammarError'\n  | 'Header'\n  | 'Highlighted'\n  | 'InsertionChange'\n  | 'Mathematics'\n  | 'MoveChange'\n  | 'SpellingError'\n  | 'TrackChanges'\n  | 'Unknown'\n  | 'UnsyncedChange';\n\nexport type AccessibilityAnnotationInfo = Readonly<{\n  typeID: AnnotationType;\n  typeName?: string;\n  author?: string;\n  dateTime?: string;\n  target?: string;\n}>;\n\nexport type AccessibilityActionName =\n  | RN.AccessibilityActionName\n  | 'AddToSelection'\n  | 'RemoveFromSelection'\n  | 'Select'\n  | 'Expand'\n  | 'Collapse';\n\nexport type Cursor =\n  | 'auto'\n  | 'default'\n  | 'pointer'\n  | 'help'\n  | 'not-allowed'\n  | 'wait'\n  | 'move'\n  | 'nesw-resize'\n  | 'ns-resize'\n  | 'nwse-resize'\n  | 'we-resize'\n  | 'text'\n\nexport type AccessibilityActionInfo = Readonly<{\n  name: AccessibilityActionName;\n  label?: string;\n}>;\n\nexport type AccessibilityActionEvent = RN.NativeSyntheticEvent<\n  Readonly<{\n    actionName: string;\n  }>\n  >;\n\nexport type AccessibilityState = RN.AccessibilityState & { multiselectable?: boolean, required?: boolean };\n\nexport type SharedAccessibilityPropsIOSandWin32 = {\n  onAccessibilityTap?: () => void;\n};\n\nexport type OmittedAccessibilityPropsWin32 = {\n  accessibilityActions?: ReadonlyArray<RN.AccessibilityActionInfo>;\n  accessibilityRole?: RN.AccessibilityRole;\n  accessibilityState?: RN.AccessibilityState;\n};\n\nexport type BasePropsWin32 = {\n  /**\n   * Tells a person using a screen reader the type of element they are focused on.\n   *\n   * Overrides the `accessibilityRole` prop on React Native to accept a subset of ARIA roles.\n   *\n   * Possible values for ARIARole are: alert, alertdialog, application, button, checkbox,\n   * comobox, dialog, group, link, menu, menubar, menuitem, none, presentation, progressbar,\n   * radio, radiogroup, scrollbar, search, spinbutton, switch, tab, tablist, tabpanel, textbox,\n   * timer, toolbar, tree, and treeitem.\n   */\n  accessibilityRole?: RN.AccessibilityRole | ARIARole;\n  accessibilityState?: AccessibilityState;\n  accessibilityActions?: ReadonlyArray<AccessibilityActionInfo>;\n\n  /**\n  * Windows Accessibility extensions for allowing other DOM elements to label or describe a given element.\n  *\n  * Defined as a reference to another DOM element inheriting from the primary base classes of React-Native elements.\n  * The reference will be converted to a native reference (tag) before passing to the native platform.\n  */\n  accessibilityDescribedBy?: React.RefObject<any>;\n  accessibilityLabeledBy?: React.RefObject<any>;\n};\n\nexport type ViewWin32OmitTypes = RN.ViewPropsAndroid &\n  RN.ViewPropsIOS &\n  RN.AccessibilityPropsAndroid &\n  Omit<RN.AccessibilityPropsIOS, SharedAccessibilityPropsIOSandWin32> &\n  OmittedAccessibilityPropsWin32;\n\n/**\n * Properties for ViewWin32 component\n */\nexport interface IViewWin32Props extends Omit<RN.ViewProps, ViewWin32OmitTypes>, BasePropsWin32 {\n  type?: React.ElementType;\n  children?: React.ReactNode;\n  accessibilityActions?: ReadonlyArray<AccessibilityActionInfo>;\n  /**\n   * Tells a person using a screen reader what kind of annotation they\n   * have selected. If available, it will also tell a person the author of the annotation and\n   * the date and time the annotation was posted.\n   *\n   * Note: If typeID is 'Unknown', a typeName must be provided.\n   */\n  accessibilityAnnotation?: AccessibilityAnnotationInfo;\n  /**\n  * accessibilityDescription provides more detailed information specific to the element (i.e. last edit date, full location for a file)\n  * while accessibilityHint provides infomation on what will happen when they perform an action.\n  *\n  */\n  accessibilityDescription?: string;\n  accessibilityLevel?: number;\n  accessibilityPositionInSet?: number;\n\n  accessibilitySetSize?: number;\n  animationClass?: string;\n  focusable?: boolean;\n\n  /**\n   * The onBlur event occurs when an element loses focus.  The opposite of onBlur is onFocus.  Note that in React\n   * Native, unlike in the web, the onBlur event bubbles (similar to onFocusOut in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onBlur?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onBlur event occurs when an element loses focus.  The opposite of onBlur is onFocus.  Note that in React\n   * Native, unlike in the web, the onBlur event bubbles (similar to onFocusOut in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onBlurCapture?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onFocus event occurs when an element gets focus. The opposite of onFocus is onBlur.  Note that in React\n   * Native, unlike in the web, the onFocus event bubbles (similar to onFocusIn in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onFocus?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onFocus event occurs when an element gets focus. The opposite of onFocus is onBlur.  Note that in React\n   * Native, unlike in the web, the onFocus event bubbles (similar to onFocusIn in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onFocusCapture?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n\n  onKeyDown?: (args: IKeyboardEvent) => void;\n  onKeyDownCapture?: (args: IKeyboardEvent) => void;\n  onKeyUp?: (args: IKeyboardEvent) => void;\n  onKeyUpCapture?: (args: IKeyboardEvent) => void;\n\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n\n  keyDownEvents?: IHandledKeyboardEvent[];\n  keyUpEvents?: IHandledKeyboardEvent[];\n\n  /**\n   * Provides a screentip to be used on hover of the view\n   */\n  tooltip?: string;\n  cursor?: Cursor;\n}\n"]}