{"version":3,"file":"ViewWin32.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/View/ViewWin32.tsx"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;AAEH,kDAAyB;AAEzB,+CAAmE;AAEnE,MAAM,gBAAgB,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAgBxD,QAAA,SAAS,GAAG,eAAK,CAAC,UAAU,CACvC,CAAC,KAAsB,EAAE,GAAmB,EAAE,EAAE;IAE9C;;OAEG;IACH,IAAI,OAAO,EAAE;QACX,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACpD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,OAAO,CAAC,KAAK,CAAC,yBAAyB,IAAI,8CAA8C,CAAC,CAAC;aAC5F;QACH,CAAC,CAAC,CAAC;KACJ;IAED;;;OAGG;IAEH,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnE,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvE,MAAM,EAAC,sBAAsB,EAAE,wBAAwB,KAAa,KAAK,EAAb,IAAI,UAAI,KAAK,EAAnE,sDAA2D,CAAQ,CAAC;IAC1E,eAAK,CAAC,eAAe,CAAC,GAAG,EAAE;QACzB,IAAI,sBAAsB,KAAK,SAAS,IAAI,sBAAsB,CAAC,OAAO,KAAK,IAAI,EACnF;YACE,kBAAkB,CAAC,6BAAc,CAAC,sBAAsB,CAAC,OAIvB,CAAC,CAAC,CAAC;SACtC;QAED,IAAI,wBAAwB,KAAK,SAAS,IAAI,wBAAwB,CAAC,OAAO,KAAK,IAAI,EACvF;YACE,oBAAoB,CAAC,6BAAc,CAAC,wBAAwB,CAAC,OAI3B,CAAC,CAAC,CAAC;SACtC;IACH,CAAC,EAAE,CAAC,sBAAsB,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAEvD;;OAEG;IACH,MAAM,QAAQ,GAAG,eAAK,CAAC,MAAM,EAAa,CAAC;IAE3C,MAAM,YAAY,GAAG,gBAAgB,CAAC;QACpC,eAAe,EAAE,GAAG,EAAE,CAAC,GAAG;QAC1B,WAAW,EAAE,QAAQ,CAAC,EAAE;YACtB,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC;YAE5B;;eAEG;YACH,IAAI,QAAQ,EACZ;gBACE,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;oBACpB,4BAAa,CAAC,SAAS,CAAC,0BAA0B,CAChD,6BAAc,CAAC,QAAQ,CAAC,EACxB,4BAAa,CAAC,SAAS,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,KAAK,EACtE,IAAI,CACH,CAAC;gBACN,CAAC,CAAC;aACH;QACH,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,8BAAC,mBAAI,kBAAC,GAAG,EAAE,YAAY,IACzB,IAA4B,EAC7B,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,sBAAsB,EAAC,eAAe,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAC5E,CAAC,CAAC,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,wBAAwB,EAAC,iBAAiB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EACpF,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright: Microsoft 2015\n *\n * RN-specific implementation of the cross-platform View abstraction.\n */\n\nimport React from 'react'\nimport RN = require('react-native');\nimport { View, findNodeHandle, NativeModules } from 'react-native';\nimport { IViewWin32Props, UseFrom } from './ViewWin32.Props';\nconst setAndForwardRef = require('../../Utilities/setAndForwardRef');\n\n/**\n * Basic View component with additional Win32 specific functionality\n */\n\ntype InnerViewWin32Props = UseFrom<IViewWin32Props, RN.ViewProps, 'accessibilityRole'> &\n  UseFrom<IViewWin32Props, RN.ViewProps, 'accessibilityState'> &\n  UseFrom<IViewWin32Props, RN.ViewProps, 'accessibilityActions'> &\n  UseFrom<IViewWin32Props, RN.ViewProps, 'onAccessibilityAction'>;\n\ntype ViewWin32Type = React.ForwardRefExoticComponent<\nIViewWin32Props & React.RefAttributes<View>\n> &\n  View;\n\nexport const ViewWin32 = React.forwardRef(\n  (props: IViewWin32Props, ref: React.Ref<any>) => {\n\n    /**\n     * Check for raw text in the DOM.\n     */\n    if (__DEV__) {\n      React.Children.toArray(props.children).forEach(item => {\n        if (typeof item === 'string') {\n          console.error(`Unexpected text node: ${item}. A text node cannot be a child of a <View>.`);\n        }\n      });\n    }\n\n    /**\n     * Process accessibility refs into node handles after initial DOM render, before sent across the bridge.\n     * useLayoutEffect will invalidate the render to assess the ref-based accessibility properties.\n     */\n\n    const [labeledByTarget, setLabeledByTarget] = React.useState(null);\n    const [describedByTarget, setDescribedByTarget] = React.useState(null);\n    const {accessibilityLabeledBy, accessibilityDescribedBy, ...rest} = props;\n    React.useLayoutEffect(() => {\n      if (accessibilityLabeledBy !== undefined && accessibilityLabeledBy.current !== null)\n      {\n        setLabeledByTarget(findNodeHandle(accessibilityLabeledBy.current as\n          | null\n          | number\n          | React.Component<any, any, any>\n          | React.ComponentClass<any, any>));\n      }\n\n      if (accessibilityDescribedBy !== undefined && accessibilityDescribedBy.current !== null)\n      {\n        setDescribedByTarget(findNodeHandle(accessibilityDescribedBy.current as\n          | null\n          | number\n          | React.Component<any, any, any>\n          | React.ComponentClass<any, any>));\n      }\n    }, [accessibilityLabeledBy, accessibilityDescribedBy]);\n\n    /**\n     * Set up the forwarding ref to enable adding the focus method.\n     */\n    const focusRef = React.useRef<ViewWin32>();\n\n    const setNativeRef = setAndForwardRef({\n      getForwardedRef: () => ref,\n      setLocalRef: localRef => {\n        focusRef.current = localRef;\n\n        /**\n         * Add focus() as a callable function to the forwarded reference.\n         */\n        if (localRef)\n        {\n          localRef.focus = () => {\n            NativeModules.UIManager.dispatchViewManagerCommand(\n              findNodeHandle(localRef),\n              NativeModules.UIManager.getViewManagerConfig('RCTView').Commands.focus,\n              null\n              );\n          };\n        }\n      },\n    });\n\n    return <View ref={setNativeRef}\n    {...(rest as InnerViewWin32Props)}\n    {...((labeledByTarget !== null) ? {accessibilityLabeledBy:labeledByTarget} : {})}\n    {...((describedByTarget !== null) ? {accessibilityDescribedBy:describedByTarget} : {})}\n    />;\n  });\n\nexport type ViewWin32 = ViewWin32Type;\n"]}