{"version":3,"file":"Picker.win32.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/Picker/Picker.win32.tsx"],"names":[],"mappings":";;;;;AAAA,kDAAyB;AACzB,+CAAoF;AAEpF,MAAM,aAAa,GAAG,qCAAsB,CAAC,eAAe,CAAC,CAAC;AAC9D,MAAM,SAAS,GAAG,qCAAsB,CAAC,WAAW,CAAC,CAAC;AAEtD,MAAM,UAAW,SAAQ,eAAK,CAAC,SAA8B;IACpD,MAAM;QACX,OAAO,8BAAC,aAAa,oBAAK,IAAI,CAAC,KAAK,EAAI,CAAC;IAC3C,CAAC;CACF;AAAA,CAAC;AAEF,SAAS,mBAAmB,CAAC,WAAwB,EAAE,QAA0B;IAC/E,OAAO,CAAC,KAAmD,EAAE,EAAE;QAC7D,MAAM,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC;QACtC,IAAI,CAAC,aAAa,IAAI,CAAC,QAAQ,EAAE;YAC/B,OAAO;SACR;QACD,MAAM,WAAW,GAAG,QAAwB,CAAC;QAC7C,MAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC;QAExD,IAAI,aAAa,IAAI,CAAC,IAAI,aAAa,GAAG,WAAW,CAAC,MAAM,EAAE;YAC5D,aAAa,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SACtE;aAAM;YACL,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SACpC;IACH,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,MAAO,SAAQ,eAAK,CAAC,SAA0B;IAG5C,MAAM;QACX,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE/C,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;QACvB,IAAI,aAAa,IAAI,QAAQ,EAAE;YAC7B,aAAa,GAAI,QAAyB,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;gBAChE,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,KAAK,aAAa,CAAC;YAClD,CAAC,CAAC,CAAC;SACJ;QAED,MAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAChE,MAAM,WAAW,mCACZ,IAAI,CAAC,KAAK,KACb,aAAa;YACb,aAAa,GACd,CAAC;QAEF,OAAO,8BAAC,SAAS,oBAAK,WAAW,GAAG,QAAQ,CAAa,CAAC;IAC5D,CAAC;;AApBa,WAAI,GAAG,UAAU,CAAC;AAuBlC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","sourcesContent":["import React from 'react'\nimport { PickerItemProps, PickerProps, requireNativeComponent } from 'react-native';\n\nconst RCTPickerItem = requireNativeComponent('RCTPickerItem');\nconst RCTPicker = requireNativeComponent('RCTPicker');\n\nclass PickerItem extends React.Component<PickerItemProps, {}> {\n  public render(): React.ReactNode {\n    return <RCTPickerItem {...this.props} />;\n  }\n};\n\nfunction getValueChangeEvent(pickerProps: PickerProps, children?: React.ReactNode) {\n  return (event: { nativeEvent: { pickerItemIndex: number } }) => {\n    const { onValueChange } = pickerProps;\n    if (!onValueChange || !children) {\n      return;\n    }\n    const pickerItems = children as PickerItem[];\n    const selectedIndex = event.nativeEvent.pickerItemIndex;\n\n    if (selectedIndex >= 0 && selectedIndex < pickerItems.length) {\n      onValueChange(pickerItems[selectedIndex].props.value, selectedIndex);\n    } else {\n      onValueChange(null, selectedIndex);\n    }\n  };\n}\n\nclass Picker extends React.Component<PickerProps, {}> {\n  public static Item = PickerItem;\n\n  public render(): React.ReactNode {\n    const { selectedValue, children } = this.props;\n\n    let selectedIndex = -1;\n    if (selectedValue && children) {\n      selectedIndex = (children as PickerItem[]).findIndex(pickerItem => {\n        return pickerItem.props.value === selectedValue;\n      });\n    }\n\n    const onValueChange = getValueChangeEvent(this.props, children);\n    const nativeProps = {\n      ...this.props,\n      selectedIndex,\n      onValueChange\n    };\n\n    return <RCTPicker {...nativeProps}>{children}</RCTPicker>;\n  }\n}\n\nmodule.exports = Picker;\n"]}