{"version":3,"file":"EnterString.win32.js","sourceRoot":"","sources":["../../../src/Libraries/Components/EnterString.win32.tsx"],"names":[],"mappings":"AAAA;;GAEG;AACH,YAAY,CAAC;;;;;AAEb,+CAA4E;AAC5E,kDAAyB;AACzB,wCAAyC;AAuBzC,MAAM,iBAAkB,SAAQ,eAAK,CAAC,SAAsC;IAmDnE,MAAM;QACX,OAAO,8BAAC,cAAc,oBAAK,IAAI,CAAC,KAAK,EAAI,CAAC;IAC5C,CAAC;;AApDD,gCAAgC;AAEhC;;;GAGG;AACH;;;;;;;;;;EAUE;AAEH,8CAA8C;AAC/B,2BAAS,GAAQ;IAC7B,mDAAmD;IACnD,qBAAqB;IACrB;;OAEG;IACH,KAAK,EAAE,SAAS,CAAC,MAAM;IAEvB;;OAEG;IACH,QAAQ,EAAE,SAAS,CAAC,IAAI;IAExB;;OAEG;IACH,KAAK,EAAE,SAAS,CAAC,MAAM;IAEvB;;OAEG;IACH,SAAS,EAAE,SAAS,CAAC,IAAI;CAC1B,CAAC;AAEY,8BAAY,GAA4B;IACpD,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,EAAE;IACT,SAAS,EAAE,IAAI;CAChB,CAAC;AAOJ,MAAM,cAAc,GAAG,qCAAsB,CAAC,gBAAgB,CAAC,CAAC;AAEhE,MAAqB,WAAY,SAAQ,eAAK,CAAC,SAAgC;IAQtE,MAAM;QACX,MAAM,IAAI,qBAAQ,IAAI,CAAC,KAAK,CAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnD,CAAC,6CAA6C;QAE/C,OAAO,8BAAC,iBAAiB,oBAAM,IAAuC,EAAI,CAAC;IAAE,CAAC;IAExE,gBAAgB,CAAC,KAAsD;QAC7E,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC9C;IACH,CAAC;;AApBH,8BAqBC;AApBe,wBAAY,GAAsB;IAC9C,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,EAAE;IACT,SAAS,EAAE,IAAI;CAChB,CAAC","sourcesContent":["/**\n * @providesModule EnterString\n */\n'use strict';\n\nimport { requireNativeComponent, NativeSyntheticEvent } from 'react-native';\nimport React from 'react'\nimport PropTypes = require('prop-types');\n\nexport interface IEnterStringProps /*extends React.ClassAttributes<React.View>*/ {\n  // ViewProperties {\n  disabled?: boolean;\n  value?: string;\n  label?: string;\n  onChanged?: (newValue: string) => void;\n}\n\ninterface INativeOnChangedEventArgs {\n  text: string;\n}\n\n// Same as EnterStringProps, but the event args are objects\ninterface IEnterStringNativeProps /*extends React.ClassAttributes<React.View>*/ {\n  // ViewProperties {\n  disabled?: boolean;\n  value?: string;\n  label?: string;\n  onChanged?: (event: NativeSyntheticEvent<INativeOnChangedEventArgs>) => void;\n}\n\nclass EnterStringNative extends React.Component<IEnterStringNativeProps, {}> {\n  // mixins: [NativeMethodsMixin],\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  /*\n  viewConfig: {\n    uiViewClassName: 'RCTEnterString',\n    validAttributes: {\n        ...ReactNativeViewAttributes.RCTView,\n        text: true,\n        disabled: true,\n        label: true,\n    },\n  },\n  */\n\n // TODO figure out how to get a real type here\n  public static propTypes: any = {\n    // React.ValidationMap<IEnterStringNativeProps> = {\n    // ...View.propTypes,\n    /**\n     * Text to display inside the EnterString\n     */\n    value: PropTypes.string,\n\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Label\n     */\n    label: PropTypes.string,\n\n    /**\n     * Callback when text is changed\n     */\n    onChanged: PropTypes.func,\n  };\n\n  public static DefaultProps: IEnterStringNativeProps = {\n    disabled: false,\n    value: '',\n    label: '',\n    onChanged: null,\n  };\n\n  public render() {\n    return <RCTEnterString {...this.props} />;\n  }\n}\n\nconst RCTEnterString = requireNativeComponent('RCTEnterString');\n\nexport default class EnterString extends React.Component<IEnterStringProps, {}> {\n  public static DefaultProps: IEnterStringProps = {\n    disabled: false,\n    value: '',\n    label: '',\n    onChanged: null,\n  };\n\n  public render() {\n    const args = { ...this.props };\n    if (args.onChanged) {\n      args.onChanged = this._onChangedNative.bind(this);\n    } // TODO how should this work without the cast\n\n    return <EnterStringNative {...(args as any) as IEnterStringNativeProps} />;  }\n\n  private _onChangedNative(event: NativeSyntheticEvent<INativeOnChangedEventArgs>) {\n    if (this.props.onChanged) {\n      this.props.onChanged(event.nativeEvent.text);\n    }\n  }\n}\n"]}