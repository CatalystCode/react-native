{"version":3,"file":"TextWin32Test.js","sourceRoot":"","sources":["../../../../../src/Libraries/Components/Text/Tests/TextWin32Test.tsx"],"names":[],"mappings":"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","sourcesContent":["'use strict';\nimport React from 'react'\nimport { Button, View } from 'react-native';\nimport { TextWin32 } from '../../Text/TextWin32';\nimport { ViewWin32 } from '../../View/ViewWin32';\n\n// Disabling no-jsx-lambda so functional components are more convenient to use\n\nconst TextRunsTest: React.FC<{}> = () => {\n  return (\n    <View focusable>\n      <TextWin32>\n        <TextWin32>Text With </TextWin32>\n        <TextWin32>Multiple Text </TextWin32>\n        <TextWin32>Children [Runs]</TextWin32>\n      </TextWin32>\n    </View>\n  );\n};\n\nconst FocusableTextTest: React.FC<{}> = () => {\n  return (\n    <ViewWin32>\n      <TextWin32 focusable>This TextWin32 demonstrates focusable</TextWin32>\n    </ViewWin32>\n  );\n};\n\nconst SelectableTextTest: React.FC<{}> = () => {\n  return (\n    <ViewWin32>\n      <TextWin32 selectable>This TextWin32 demonstrates selectable</TextWin32>\n    </ViewWin32>\n  );\n};\n\nconst TextStyleTest: React.FC<{}> = () => {\n  return (\n    <ViewWin32>\n      <TextWin32 textStyle={'MediumBold'}>Normal Text Display</TextWin32>\n    </ViewWin32>\n  );\n};\n\nconst TooltipTextTest: React.FC<{}> = () => {\n  return (\n    <ViewWin32>\n      <TextWin32 tooltip=\"Example Tooltip\">This TextWin32 demonstrates a tooltip</TextWin32>\n    </ViewWin32>\n  );\n};\n\nconst TextPromotionTest: React.FC<{}> = () => {\n  enum FocusabilityState {\n    NoFocus,\n    Focusable,\n    Selectable,\n  }\n  const [focusabilityState, setFocusabilityState] = React.useState(FocusabilityState.NoFocus);\n  return (\n    <ViewWin32>\n      <Button\n      title=\"Click to Promote Focusability\"\n      onPress={() => \n        {\n          if (focusabilityState === FocusabilityState.NoFocus)\n          {\n            setFocusabilityState(FocusabilityState.Focusable);\n          }\n          else if (focusabilityState === FocusabilityState.Focusable)\n          {\n            setFocusabilityState(FocusabilityState.Selectable);\n          }\n        }}  />\n      <TextWin32\n        focusable={focusabilityState === FocusabilityState.Focusable}\n        selectable={focusabilityState === FocusabilityState.Selectable}\n      >\n        This text is currently...\n      </TextWin32>\n      <TextWin32>\n        {(focusabilityState === FocusabilityState.NoFocus) ? 'No Focusability' : \n         (focusabilityState === FocusabilityState.Focusable) ? 'Focusable' :\n         'Selectable'}\n      </TextWin32>\n    </ViewWin32>\n  );\n};\n\nconst BlurringAndFocusingTextTest: React.FC<{}> = () => {\n  const [isFocusableFocused, setIsFocusableFocused] = React.useState(false);\n  const [isSelectableFocused, setIsSelectableFocused] = React.useState(false);\n  return (\n    <View>\n      <TextWin32\n        focusable\n        onBlur={() => setIsFocusableFocused(false)}\n        onFocus={() => setIsFocusableFocused(true)}>Focusable text is focused:</TextWin32>\n        <TextWin32\n        textStyle={isFocusableFocused ? 'MediumBold' : 'MediumStandard'}>{isFocusableFocused ? 'true' : 'false'}</TextWin32>\n      <TextWin32\n        selectable\n        onBlur={() => setIsSelectableFocused(false)}\n        onFocus={() => setIsSelectableFocused(true)}>Selectable text is focused:</TextWin32>\n        <TextWin32\n        textStyle={isSelectableFocused ? 'MediumBold' : 'MediumStandard'}>{isSelectableFocused ? 'true' : 'false'}</TextWin32>\n    </View>\n  );\n};\n\nexport const title = 'TextWin32';\nexport const displayName = 'TextWin32';\nexport const description = 'TextWin32 Examples and Tests';\nexport const examples = [\n    {\n      title: 'Text Runs Example',\n      description: 'text runs in action',\n      render(): JSX.Element {\n        return (<TextRunsTest />);\n      },\n    },\n    {\n      title: 'Focusable Example',\n      description: 'focusable in action',\n      render(): JSX.Element {\n        return (<FocusableTextTest />);\n      },\n    },\n    {\n      title: 'Selectable Example',\n      description: 'selectable in action',\n      render(): JSX.Element {\n        return (<SelectableTextTest />);\n      },\n    },\n    {\n      title: 'TextStyle Example',\n      description: 'TextStyles in action',\n      render(): JSX.Element {\n        return (<TextStyleTest />);\n      },\n    },\n    {\n      title: 'Tooltip Example',\n      description: 'tooltips in action',\n      render(): JSX.Element {\n        return (<TooltipTextTest />);\n      },\n    },\n    {\n      title: 'TextPromotion Example',\n      description: 'dynamic increases in focusability in action',\n      render(): JSX.Element {\n        return (<TextPromotionTest />);\n      },\n    },\n    {\n      title: 'Focus and Blur Example',\n      description: 'onFocus/onBlur in action',\n      render(): JSX.Element {\n        return (<BlurringAndFocusingTextTest />);\n      },\n    },\n  ];"]}