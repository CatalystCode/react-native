{"version":3,"file":"TextWin32.Props.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/Text/TextWin32.Props.ts"],"names":[],"mappings":"","sourcesContent":["import RN = require('react-native');\nimport { SharedAccessibilityPropsIOSandWin32, OmittedAccessibilityPropsWin32, BasePropsWin32, IKeyboardEvent, IHandledKeyboardEvent } from '../View/ViewWin32.Props';\n\n// removes from interface T the members of interface K\ntype Omit<T, K> = Pick<T, Exclude<keyof T, keyof K>>;\n\nexport type TextWin32OmitTypes = Omit<RN.TextPropsAndroid, SharedTextPropsAndroidandWin32> &\n  RN.TextPropsIOS &\n  RN.AccessibilityPropsAndroid &\n  Omit<RN.AccessibilityPropsIOS, SharedAccessibilityPropsIOSandWin32> &\n  OmittedAccessibilityPropsWin32;\n\nexport type SharedTextPropsAndroidandWin32 = {\n  selectable?: boolean;\n};\n\n/**\n * Role-based text style names.\n */\nexport type TextStyle =\n  | 'None'\n  | 'SmallStandard'\n  | 'SmallSecondary'\n  | 'MediumStandard'\n  | 'MediumSecondary'\n  | 'MediumApp'\n  | 'MediumBold'\n  | 'MediumBoldApp'\n  | 'LargeStandard'\n  | 'LargePlusStandard'\n  | 'ExtraLargeStandard'\n  | 'HugeStandard';\n\nexport interface ITextWin32Props extends Omit<RN.TextProps, TextWin32OmitTypes>, BasePropsWin32 {\n  onKeyDown?: (args: IKeyboardEvent) => void;\n  onKeyDownCapture?: (args: IKeyboardEvent) => void;\n  onKeyUp?: (args: IKeyboardEvent) => void;\n  onKeyUpCapture?: (args: IKeyboardEvent) => void;\n\n  keyDownEvents?: IHandledKeyboardEvent[];\n  keyUpEvents?: IHandledKeyboardEvent[];\n\n  /** Enables a focusable label with copyability but without character selectability (property:selectable) */\n  focusable?: boolean;\n\n  /**\n   * The onBlur event occurs when an element loses focus.  The opposite of onBlur is onFocus.  Note that in React\n   * Native, unlike in the web, the onBlur event bubbles (similar to onFocusOut in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onBlur?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onBlur event occurs when an element loses focus.  The opposite of onBlur is onFocus.  Note that in React\n   * Native, unlike in the web, the onBlur event bubbles (similar to onFocusOut in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onBlurCapture?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onFocus event occurs when an element gets focus. The opposite of onFocus is onBlur.  Note that in React\n   * Native, unlike in the web, the onFocus event bubbles (similar to onFocusIn in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onFocus?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  /**\n   * The onFocus event occurs when an element gets focus. The opposite of onFocus is onBlur.  Note that in React\n   * Native, unlike in the web, the onFocus event bubbles (similar to onFocusIn in the web).\n   *\n   * `ev.target === ev.currentTarget` when the focus is being lost from this component.\n   * `ev.target !== ev.currentTarget` when the focus is being lost from a descendant.\n   */\n  onFocusCapture?: (ev: RN.NativeSyntheticEvent<{}>) => void;\n  \n  /**\n   * Role-based styling of the text control. The styles applied include\n   * font face, size, weight and color. These styles take precedence over\n   * the `style` property.\n   *\n   * @remarks\n   * The default value is `MediumStandard`.\n   *\n   * When set to `None`, role-based styling is disabled.\n   *\n   * @deprecated Use `style` instead.\n   */\n  textStyle?: TextStyle;\n\n  /** Tooltip displayed on mouse hover of this element */\n  tooltip?: string;\n}\n"]}