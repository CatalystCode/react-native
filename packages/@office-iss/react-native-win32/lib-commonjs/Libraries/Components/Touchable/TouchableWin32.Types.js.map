{"version":3,"file":"TouchableWin32.Types.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/Touchable/TouchableWin32.Types.tsx"],"names":[],"mappings":"","sourcesContent":["import React from 'react'\nimport { GestureResponderEvent, StyleProp, NativeSyntheticEvent } from 'react-native';\n\n/**\n * Gesture responder states\n */\nexport type IState =\n  | 'NOT_RESPONDER'\n  | 'RESPONDER_INACTIVE_PRESS_IN'\n  | 'RESPONDER_INACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_PRESS_IN'\n  | 'RESPONDER_ACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_OUT'\n  | 'ERROR';\n\n/**\n * Signals into the gesture responder system\n */\nexport type ISignal =\n  | 'DELAY'\n  | 'RESPONDER_GRANT'\n  | 'RESPONDER_RELEASE'\n  | 'RESPONDER_TERMINATED'\n  | 'ENTER_PRESS_RECT'\n  | 'LEAVE_PRESS_RECT'\n  | 'LONG_PRESS_DETECTED';\n\ntype ISignalTransitions = { [P in ISignal]: IState };\n\n/**\n * Map of State to [Signal to State],\n * describing state transition maps\n */\nexport type ITransitions = { [P in IState]: ISignalTransitions };\n\n/**\n * Describes lookup maps of states meeting\n * some specified criteria\n */\nexport type IStateConditions = { [P in IState]: boolean };\n\n/**\n * Describes the position at which an event occurred\n */\nexport interface IPosition {\n  left: number;\n  top: number;\n}\n\n/**\n * Describes the height and width of a control\n */\nexport interface IDimensions {\n  width: number;\n  height: number;\n}\n\n/**\n * Describes a touch\n */\nexport interface ITouchInfo {\n  touchActive: boolean;\n  startPageX: number;\n  startPageY: number;\n  startTimeStamp: number;\n  currentPageX: number;\n  currentPageY: number;\n  currentTimeStamp: number;\n  previousPageX: number;\n  previousPageY: number;\n  previousTimeStamp: number;\n}\n\n/**\n * More fully defines an event by augmenting touchHistory\n */\nexport interface IResponderSyntheticEvent<T> extends NativeSyntheticEvent<T> {\n  touchHistory: {\n    indexOfSingleActiveTouch: number;\n    mostRecentTimeStamp: number;\n    numberActiveTouches: number;\n    touchBank: ITouchInfo[];\n  };\n}\n\n/**\n * This encompasses all information used by TouchableWin32 based controls\n * during callbacks and in response to press events\n */\nexport type IPressEvent = IResponderSyntheticEvent<{\n  changedTouches: IPressEvent[];\n  force: number;\n  identifier: number;\n  locationX: number;\n  locationY: number;\n  pageX: number;\n  pageY: number;\n  target?: number;\n  timestamp: number;\n  touches: IPressEvent[];\n}> &\n  GestureResponderEvent;\n\n/**\n * Describes both the global and relative position of a press\n */\nexport interface IPressInLocation {\n  pageX: number;\n  pageY: number;\n  locationX: number;\n  locationY: number;\n}\n\n/**\n * Used by IRenderChild, it simply describes a function that takes\n * some generic state type T and returns a ReactNode\n */\nexport type IChildAsFunction<T> = (state: T) => React.ReactNode;\n\n/**\n * An IRenderChild describes children as a function that take the current\n * state of the parent component. It is up to the parent to invoke the function\n * and make proper use of the more typical ReactNode object that is returned\n * This is an especially helpful construct when children of a Touchable require\n * knowledge of the interaction state of their parent to properly render themselves\n * (e.g. foreground color of a text child)\n */\nexport type IRenderChild<T> = IChildAsFunction<T> | React.ReactNode;\n\n/**\n * An IRenderStyle describes style as a function that takes the current\n * state of the parent component. It is up to the parent to invoke the function\n * and make proper use of the more typical StyleProp<S> object that is returned\n * This is convenient for when styles need to be calculated depending on interaction states.\n */\nexport type IRenderStyle<T, S> = (state: T) => StyleProp<S>;\n"]}