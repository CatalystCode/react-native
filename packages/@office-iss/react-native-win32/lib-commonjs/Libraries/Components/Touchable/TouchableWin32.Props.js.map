{"version":3,"file":"TouchableWin32.Props.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/Touchable/TouchableWin32.Props.tsx"],"names":[],"mappings":"","sourcesContent":["import { Insets, ViewStyle } from 'react-native';\n\nimport { IPressEvent, IRenderChild, IRenderStyle } from './TouchableWin32.Types';\nimport { IViewWin32Props, IKeyboardEvent } from '../View/ViewWin32.Props';\n\nexport interface ITouchableWin32State {\n  isPressed: boolean;\n  isFocused: boolean;\n  isHovered: boolean;\n}\n\nexport interface ITouchableWin32Props extends IViewWin32Props {\n  rejectResponderTermination?: boolean;\n  disabled?: boolean;\n  touchableHandleActivePressIn?: (e: IPressEvent) => void;\n  touchableHandleActivePressOut?: (e: IPressEvent) => void;\n  touchableHandlePress?: (e: IPressEvent) => void;\n  touchableHandleKeyPress?: (e: IKeyboardEvent) => void;\n  touchableHandleKeyPressDown?: (e: IKeyboardEvent) => void;\n  touchableHandleLongPress?: (e: IPressEvent) => void;\n  touchableGetHighlightDelayMS?: () => number;\n  touchableGetPressRectOffset?: () => Insets;\n  touchableGetLongPressDelayMS?: () => number;\n  touchableGetPressOutDelayMS?: () => number;\n  touchableGetHitSlop?: () => Insets;\n  touchSoundDisabled?: boolean;\n  onLongPress?: () => void;\n  children?: IRenderChild<ITouchableWin32State>;\n  // Typescript will not allow an extension of the IView* interface\n  // that allows style to take on a function value. This is not a problem\n  // with children, presumably because function components are valid as children.\n  // As such, a renderStyle prop that takes a function value is provided\n  // instead, in conjunction with the base style prop (StyleProp<ViewStyle>).\n  // The style prop will only be used if a renderStyle is not provided.\n  renderStyle?: IRenderStyle<ITouchableWin32State, ViewStyle>;\n  /**\n   * Filters keys for touchableHandleKeyPress / touchableHandleKeyPressDown events.\n   * Space and Enter keys result in touchableHandleKeyPress(Down) in the event\n   * that no filterKeys function is provided as a callback. All keyboard events\n   * will result in onKeyUp and onKeyDown getting fired regardless of filterKeys.\n   */\n  filterKeys?: (str: string) => boolean;\n}\n"]}