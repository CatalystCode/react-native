{"version":3,"file":"TextInput.win32.js","sourceRoot":"","sources":["../../../../src/Libraries/Components/TextInput/TextInput.win32.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * @providesModule TextInput\n */\n'use strict';\n\n/**\n * This is a forked and slightly modified version of React Native's TextInput.\n * The fork is necessary as platform checks in the base implementation made the\n * control unusable on win32. In addition to cleaning up some of the code, this\n * fork also uses Typescript rather than Flow for type safety.\n *\n * More general documentation on this control can be found at\n * https://facebook.github.io/react-native/docs/textinput.html\n *\n * The original implementation can be found at\n * https://github.com/facebook/react-native/blob/1013a010492a7bef5ff58073a088ac924a986e9e/Libraries/Components/TextInput/TextInput.js\n *\n * This control does not support the full React Native TextInput interface yet.\n * Most of the work necessary to make that happen needs to happen on the native side.\n * Future work on the JS side may include:\n * 1. Expanded typings for some of the events\n * 2. Additional work to manage selection\n * 3. Any base/default styling work\n */\n\nimport React from 'react'\nimport {\n  findNodeHandle,\n  NativeModules,\n  requireNativeComponent,\n  TextInputProps,\n  NativeMethods,\n} from 'react-native';\nimport {\n  IBlurEvent,\n  IChangeEvent,\n  IFocusEvent,\n} from './TextInput.Types.win32';\n\nconst TextAncestor = require('../../Text/TextAncestor');\nconst TextInputState = require('./TextInputState');\n\ntype RCTTextInputProps = TextInputProps & {\n  text: string;\n};\n\n// RCTTextInput is the native component that win32 understands\nconst RCTTextInput = requireNativeComponent<RCTTextInputProps>('RCTTextInput');\n\n// Adding typings on ViewManagers is problematic as available functionality is not known until\n// registration at runtime and would require native and js to always be in sync.\nconst TextInputViewManager: any = NativeModules.UIManager.getViewManagerConfig('RCTTextInput');\n\nclass TextInput extends React.Component<TextInputProps, {}> {\n  // TODO: Once the native side begins supporting programmatic selection\n  // this will become important for selection management\n  // private _lastNativeTextSelection: any;\n\n  private _rafID: number;\n\n  private readonly _inputRef: React.RefObject<React.Component<RCTTextInputProps> & Readonly<NativeMethods>>;\n  private _lastNativeText: string;\n  private _eventCount = 0;\n\n  constructor(props) {\n    super(props);\n    this._inputRef = React.createRef();\n  }\n\n  /**\n   * On mount TextInput needs to register itself with TextInputState\n   * and conditionally request an animation frame for focus.\n   */\n  public componentDidMount() {\n    this._lastNativeText = this.props.value;\n\n    TextInputState.registerInput(this);\n\n    if (this.props.autoFocus) {\n      this._rafID = requestAnimationFrame(this.focus);\n    }\n  }\n\n  /**\n   * This is an unfortunate consequence of having controlled TextInputs.\n   * Tree diffing reconciliation will not always send down text values\n   * This sets text explicitly.\n   */\n  public componentDidUpdate() {\n    if ((this._lastNativeText !== this._getText())) {\n      this._getText() && this.setNativeText(this._getText());\n    }\n\n    return;\n  }\n\n  /**\n   * Pre-unmoun the TextInput should blur, unregister and clean up\n   * the animation frame for focus (edge cases)\n   */\n  public componentWillUnmount() {\n    // blur\n    if (this.isFocused()) {\n      this.blur();\n    }\n\n    // unregister\n    TextInputState.unregisterInput(this);\n\n    // cancel animationFrame\n    if (this._rafID !== null) {\n      cancelAnimationFrame(this._rafID);\n    }\n    if (this._rafID) {\n      return;\n    }\n    return;\n  }\n\n  public render() {\n    const props: TextInputProps = { ...this.props };\n\n    // By default fontScaling is turned on.\n    // win32 ignores this prop for the time being\n    props.allowFontScaling = (this.props.allowFontScaling === null\n      || this.props.allowFontScaling === undefined)\n      ? true : this.props.allowFontScaling;\n\n    return (\n      <TextAncestor.Provider value={ true }>\n        <RCTTextInput\n          { ...props }\n          ref={ this._inputRef }\n          text={ this._getText() }\n          onFocus={ this._onFocus }\n          onBlur={ this._onBlur }\n          onChange={ this._onChange }\n        />\n      </TextAncestor.Provider>\n    );\n  }\n\n  /**\n   * Returns true if the TextInput is focused\n   */\n  public isFocused(): boolean {\n    return TextInputState.currentlyFocusedInput() === this;\n  }\n\n  /**\n   * Focuses the TextInput\n   */\n  public focus = (): void => {\n    TextInputState.setFocusedTextInput(this);\n    NativeModules.UIManager.\n      dispatchViewManagerCommand(findNodeHandle(this), TextInputViewManager.Commands.focus, null);\n  }\n\n  /**\n   * Blurs the TextInput\n   */\n  public blur = (): void => {\n    TextInputState.blurTextInput(this);\n    NativeModules.UIManager.\n      dispatchViewManagerCommand(findNodeHandle(this), TextInputViewManager.Commands.blur, null);\n  }\n\n  /**\n   * Use clear for programmatic clearing of the text\n   */\n  public clear = (): void => {\n    this.setNativeText('');\n  }\n\n  private readonly setEventCount = (): void => {\n    NativeModules.UIManager.\n      dispatchViewManagerCommand(findNodeHandle(this), TextInputViewManager.Commands.setEventCount,\n        { eventCount: this._eventCount });\n  }\n\n  private readonly setNativeText = (val: string): void => {\n    if (this._lastNativeText !== val) {\n      NativeModules.UIManager.\n        dispatchViewManagerCommand(findNodeHandle(this), TextInputViewManager.Commands.setNativeText,\n          { text: val });\n    }\n  }\n\n  private readonly _getText = (): string | null => {\n    return this.props.value || (this.props.defaultValue || null);\n  }\n\n  private readonly _onChange = (e: IChangeEvent): void => {\n    const text = e.nativeEvent.text;\n    this._eventCount = e.nativeEvent.eventCount;\n    this.setEventCount();\n\n    this.props.onChange && this.props.onChange(e);\n    this.props.onChangeText && this.props.onChangeText(text);\n    this._lastNativeText = text;\n\n    this.forceUpdate();\n    return;\n  }\n\n  private readonly _onFocus = (e: IFocusEvent): void => {\n    this.focus();\n    this.props.onFocus && this.props.onFocus(e);\n  }\n\n  private readonly _onBlur = (e: IBlurEvent): void => {\n    this.props.onBlur && this.props.onBlur(e);\n  }\n}\n\nexport = TextInput;\n"]}