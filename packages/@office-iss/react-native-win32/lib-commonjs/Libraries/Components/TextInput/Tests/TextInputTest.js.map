{"version":3,"file":"TextInputTest.js","sourceRoot":"","sources":["../../../../../src/Libraries/Components/TextInput/Tests/TextInputTest.tsx"],"names":[],"mappings":"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","sourcesContent":["'use strict';\nimport React from 'react'\nimport { StyleSheet, Text, TextInput, View } from 'react-native';\n\n// Disabling no-jsx-lambda so functional components are more convenient to use\n\nconst AutoFocusingTextInputTest: React.FC<{}> = () => {\n  return (\n    <View>\n      <Text>This TextInput auto focuses</Text>\n      <TextInput\n        autoFocus\n        maxLength={140}\n        multiline\n        style={styles.input}\n      />\n    </View>\n  );\n};\n\nconst PlaceholderTextInputTest: React.FC<{}> = () => {\n  return (\n    <View>\n      <Text>This TextInput demonstrates placeholders</Text>\n      <TextInput\n        maxLength={140}\n        multiline\n        placeholder=\"I am a blue placeholder, type in me for something magical\"\n        placeholderTextColor=\"blue\"\n        style={styles.green}\n      />\n    </View>\n  );\n};\n\nconst ControllingTextInputTest: React.FC<{}> = () => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <View>\n      <Text>This TextInput inserts spaces between characters</Text>\n      <TextInput\n        multiline\n        onChangeText={(text) => setValue(text.endsWith(' ') ? value : (text + ' '))}\n        style={styles.blue}\n        value={value}\n      />\n    </View>\n  );\n};\n\nconst BlurringAndFocusingTextInputTest: React.FC<{}> = () => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  return (\n    <View>\n      <Text>This TextInput is currently focused: + {isFocused ? 'true' : 'false'}</Text>\n      <TextInput\n        multiline\n        onBlur={() => setIsFocused(false)}\n        onFocus={() => setIsFocused(true)}\n        style={styles.input}\n      />\n    </View>\n  );\n};\n\nconst LayoutListeningTextInputTest: React.FC<{}> = () => {\n  const [eventCounter, setEventCounter] = React.useState(0);\n\n  return (\n    <View>\n      <Text>The number of onContentSizeChanges is listed here + {eventCounter}</Text>\n      <TextInput\n        multiline\n        onContentSizeChange={() => setEventCounter(eventCounter + 1)}\n        style={styles.input}\n      />\n    </View>\n  );\n};\n\nconst KeyPressListeningTextInputTest: React.FC<{}> = () => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <View>\n      <Text>This TextInput uses onKeyPress to maintain state: it is slow</Text>\n      <TextInput\n        multiline\n        onKeyPress={(e) => setValue(value + e.nativeEvent.key)}\n        style={styles.input}\n        value={value}\n      />\n    </View>\n  );\n};\n\nconst StyleTextInputTest: React.FC<{}> = () => {\n  return (\n    <View>\n      <Text>This TextInput is styled differently</Text>\n      <TextInput\n        multiline\n        style={styles.superInput}\n      />\n    </View>\n  );\n};\n\nexport const title = 'TextInput';\nexport const displayName = 'TextInput';\nexport const description = 'TextInput Examples and Tests';\nexport const examples = [\n    {\n      title: 'Autofocus Example',\n      description: 'autoFocus in action',\n      render(): JSX.Element {\n        return (<AutoFocusingTextInputTest />);\n      },\n    },\n    {\n      title: 'Placeholders Example',\n      description: 'placeholder in action',\n      render(): JSX.Element {\n        return (<PlaceholderTextInputTest />);\n      },\n    },\n    {\n      title: 'Controlled Example',\n      description: 'Controlling inputs in action',\n      render(): JSX.Element {\n        return (<ControllingTextInputTest />);\n      },\n    },\n    {\n      title: 'Focus and Blur Example',\n      description: 'onFocus/onBlur in action',\n      render(): JSX.Element {\n        return (<BlurringAndFocusingTextInputTest />);\n      },\n    },\n    {\n      title: 'ContentSizeChange Example',\n      description: 'onContentSizeChange in action',\n      render(): JSX.Element {\n        return (<LayoutListeningTextInputTest />);\n      },\n    },\n    {\n      title: 'Control via onKeyPress Example',\n      description: 'onKeyPress in action',\n      render(): JSX.Element {\n        return (<KeyPressListeningTextInputTest />);\n      },\n    },\n    {\n      title: 'Super Styling Example',\n      description: 'Styling in action',\n      render(): JSX.Element {\n        return (<StyleTextInputTest />);\n      },\n    },\n  ];\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 20,\n  },\n  blue: {\n    color: 'blue',\n    height: 20,\n  },\n  green: {\n    color: 'green',\n    height: 20,\n  },\n  superInput: {\n    color: 'purple',\n    fontSize: 24,\n    fontStyle: 'italic',\n    fontWeight: 'bold',\n    fontFamily: 'times-new-roman',\n    height: 100,\n  },\n});\n"]}