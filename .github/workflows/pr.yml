name: CI
on:
  pull_request:
    branches:
      - master
jobs:

  RNWUniversalPR:
    name: Universal PR
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 45
    strategy:
      matrix:
        name: [X64Debug, X86Debug, ArmDebug, X64Release, X86Release, ArmRelease, PublicRNX86Debug]
        include:
        - X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
          UseRNFork: 'true'
          LayoutHeaders: 'true'
        - X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          UseRNFork: 'true'
        - ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: arm
          UseRNFork: 'true'
        - X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
          UseRNFork: 'true'
        - X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
          UseRNFork: 'true'
        - ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: arm
          UseRNFork: 'true'
        - PublicRNX86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          UseRNFork: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Switch to facebook/react-native
        run: cd vnext && node scripts/useUnForkedRN.js
        if: ${{ matrix.UseRNFork }} == 'true'

      - name: yarn install
        run: yarn install
        if: ${{ matrix.UseRNFork }} == 'true'

      - name: yarn install
        run: yarn install --frozen-lockfile
        if: ${{ matrix.UseRNFork }} != 'true'

      - run: yarn buildci

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore ReactWindows-Universal.sln
        run: nuget.exe restore vnext\ReactWindows-Universal.sln -PackagesDirectory vnext/packages/ -Verbosity Detailed -NonInteractive

      - name: Install SDK
        run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
        shell: powershell

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactWindows-Universal.sln
        run: msbuild vnext\ReactWindows-Universal.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /p:PlatformToolset=v141 /p:RNW_PKG_VERSION_STR="Private Build" /p:RNW_PKG_VERSION="1000,0,0,0"
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      - uses: actions/upload-artifact@master
        name: Publish Artifacts
        with:
          name: Detailed Logs for ${{parameters.project}} ${{matrix.BuildConfiguration}} ${{matrix.BuildPlatform}}
          path: vnext/ReactWindows-Universal.sln.log

      - name: Copy NuGet header files
        run: .\vnext\Scripts\Tfs\Layout-Headers.ps1 -TargetRoot ${{ runner.temp }}\artifacts
        if: ${{matrix.LayoutHeaders}} == 'true'

      - name: Copy NuGet artifacts
        run: robocopy vnext/${{matrix.BuildPlatform}}/${{matrix.BuildConfiguration}} ${{ runner.temp }}\artifacts\${{matrix.BuildPlatform}}\${{matrix.BuildConfiguration}} /E /NP

      - uses: actions/upload-artifact@master
        name: Publish Artifact ReactWindows
        with:
          name: ReactWindows
          path: ${{ runner.temp }}\artifacts

      - name: Delete vnext/build and vnext/target
        run: rmdir /S /Q vnext/build vnext/target

      - name: NuGet restore Playground.sln
        run: nuget.exe restore packages/playground/windows/Playground.sln -Verbosity Detailed -NonInteractive

      # - name: Build Playground.sln
      #   run: msbuild packages/playground/windows/Playground.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /p:PlatformToolset=v141
      #   env:
      #    BUILDPLATFORM: ${{ matrix.BuildPlatform }}
      #    BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}
      #   if: ${{ matrix.UseRNFork }} == 'true'

      # todo work out how to specify working-directory for run command
      - name: Create Playground bundle
        run: cd packages\playground && node node_modules/react-native/local-cli/cli.js bundle --entry-file Samples\index.tsx --bundle-output Playground.bundle

      # - name: NuGet restore - SampleApps
      #   run: nuget.exe restore packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln -Verbosity Detailed -NonInteractive

      # - name: Build SampleApps
      #   run: msbuild packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /p:PlatformToolset=v141
      #   env:
      #     BUILDPLATFORM: ${{ matrix.BuildPlatform }}
      #     BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      # - name: Create SampleApp bundle
      #  run: cd packages\microsoft-reactnative-sampleapps && node node_modules/react-native/local-cli/cli.js bundle --entry-file index.windows.js --bundle-output SampleApp.bundle

      # todo work out how to specify working-directory for run command
      - name: Create RNTester bundle
        #  if: ${{ matrix.UseRNFork }} == 'true'
        run: cd vnext && node ../node_modules/react-native/local-cli/cli.js bundle --entry-file .\RNTester.js --bundle-output RNTester.windows.bundle --platform windows


  RNWDesktopPR:
    name: Desktop PR
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 45
    # Can't appear to enable matrix right now:
    # https://github.community/t5/How-to-use-Git-and-GitHub/GitHub-Actions-Matrix-options-dont-work-as-documented/m-p/29558
    # Ideally we'd share more of the build def between UWPPublicRN and this job, but due to the issues with matrix right now
    # it was easier to just duplicate the job logic somewhat
    strategy:
      matrix:
        name: [X64Debug, X86Debug,X64Release, X86Release]
        include:
        - name: X64Debug
          BuildConfiguration: Debug
          BuildPlatform: x64
        - name: X86Debug
          BuildConfiguration: Debug
          BuildPlatform: x86
        - name: X64Release
          BuildConfiguration: Release
          BuildPlatform: x64
        - name: X86Release
          BuildConfiguration: Release
          BuildPlatform: x86
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: yarn install
        run: yarn install --frozen-lockfile

      - run: yarn buildci

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore ReactWindows-Universal.sln
        run: nuget.exe restore vnext\ReactWindows-Desktop.sln -PackagesDirectory vnext/packages/ -Verbosity Detailed -NonInteractive

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactWindows-Desktop.sln
        run: msbuild vnext\ReactWindows-Desktop.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /p:PlatformToolset=v141 /p:RNW_PKG_VERSION_STR="Private Build" /p:RNW_PKG_VERSION="1000,0,0,0"
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      - name: Run Desktop Unit Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" vnext/target/${{matrix.BuildPlatform}\${{matrix.BuildConfiguration}}/React.Windows.Desktop.UnitTests/React.Windows.Desktop.UnitTests.dll

      - name: Run JSI Unit Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" JSI.Desktop.UnitTests/JSI.Desktop.UnitTests.exe

      - name: Setup test servers
        run: .\vnext\Scripts\Tfs\Start-TestServers.ps1 -SourcesDirectory .\vnext -Preload -SleepSeconds 120

      - name: Run Desktop Integration Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll /blame -- RunConfiguration.TestSessionTimeout=300000
        if: ${{matrix.BuildConfiguration}} == 'Debug'

      - name: Check the metro bundle server
        run: Invoke-WebRequest -Uri "http://localhost:8081/IntegrationTests/IntegrationTestsAppWin.bundle?platform=windesktop&dev=true"

      - name: Cleanup any packagers left over from other builds
        run: |
          Get-NetTCPConnection -LocalPort 8081 -ErrorAction Ignore | ForEach-Object { Stop-Process $_.OwningProcess -ErrorAction Ignore }
          Get-NetTCPConnection -LocalPort 5555 -ErrorAction Ignore | ForEach-Object { Stop-Process $_.OwningProcess -ErrorAction Ignore }

      - name: Copy NuGet artifacts
        run: robocopy vnext/${{matrix.BuildPlatform}}/${{matrix.BuildConfiguration}} ${{ runner.temp }}\artifacts\${{matrix.BuildPlatform}}\${{matrix.BuildConfiguration}} /E /NP React.Windows.Desktop.DLL\** React.Windows.Desktop.Test.DLL\**

      - uses: actions/upload-artifact@master
        name: Publish Artifact ReactWindows
        with:
          name: ReactWindows
          path: ${{ runner.temp }}\artifacts

  # This job verifies creating a new react-native app, installing react-native-windows, applying the vnext template, and building it
  CliInit:
    name: Verify react-native init
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 30
    strategy:
      matrix:
        name: [DebugCpp, DebugCs, ReleaseCpp, ReleaseCs]
        include:
        - name: DebugCpp
          configuration: Debug
          language: cpp
        - name: DebugCs
          configuration: Debug
          language: cs
        - name: ReleaseCpp
          configuration: Release
          language: cpp
        - name: ReleaseCs
          configuration: Release
          language: cs
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - name: yarn install
      run: yarn install --frozen-lockfile

    # todo work out how to specify working-directory for run command
    - name: yarn build (local react-native-windows)
      run: cd vnext && yarn build

    # yarn ends up copying the whole node_modules folder when doing an install of a file package
    # Delete node_modules, so that resolution is more like when installing from a published npm package
    - name: Remove node_modules
      run: cd vnext && rd /S /Q node_modules

    - name: Install react-native cli
      run: npm install -g react-native-cli

    - name: Init new project
      run: cd ${{ runner.temp }} && react-native init testcli --version 0.60.6

    - name: Install rnpm-plugin-windows
      run: cd ${{ runner.temp }}\testcli && yarn add rnpm-plugin-windows@file:${{ runner.workspace }}\react-native-windows\current\local-cli\rnpm\windows

    - name: Apply windows template
      run: cd ${{ runner.temp }}\testcli && react-native windows --template vnext --windowsVersion file:${{ runner.workspace }}\react-native-windows\vnext --overwrite --language ${{matrix.language}}

    - name: Install SDK
      run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
      shell: powershell

    - name: Setup Nuget.exe
      uses: warrenbuckley/Setup-Nuget@v1

    - name: Setup MSBuild.exe
      uses: warrenbuckley/Setup-MSBuild@v1

    - name: NuGet restore testcli.sln
      run: nuget restore ${{ runner.temp }}\testcli\windows\testcli.sln

    - name: Build testcli.sln
      run: msbuild ${{ runner.temp }}\testcli\windows\testcli.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal
      env:
        BUILDPLATFORM: x64
        BUILDCONFIGURATION: ${{matrix.configuration}}

    - uses: actions/upload-artifact@master
      name: Publish Artifacts
      with:
        name: Detailed Logs for testcli.sln ${{matrix.configuration}} ${{matrix.language}}
        path: ${{ runner.temp }}/testcli/windows/testcli.sln.log

    - name: Create bundle testcli.sln
      run: cd ${{ runner.temp }}\testcli && react-native bundle --entry-file index.windows.js platform uwp --bundle-output test.bundle

  RNWFormatting:
    name: Verify change files + formatting
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: yarn install
        run: yarn install --frozen-lockfile

      - name: Check for change files
        run: node ./node_modules/beachball/bin/beachball.js check --changehint "Run `yarn change` from root of repo to generate a change file."

      - run: yarn format:verify

  CurrentPR:
    name: Current (C#) PR
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 10
    strategy:
      matrix:
        #TODO add DebugBundle
        BuildPlatform: [x64, x86, ARM]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Download/Extract Winium
        run: |
          curl -o ${{ runner.temp }}\winium.zip https://github.com/2gis/Winium.Desktop/releases/download/v1.6.0/Winium.Desktop.Driver.zip
          mkdir ${{ runner.temp }}\winium
          Add-Type -A 'System.IO.Compression.FileSystem'
          [IO.Compression.ZipFile]::ExtractToDirectory("${{ runner.temp }}\winium.zip", "${{ runner.temp }}\winium")
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore ReactNative.sln
        run: nuget.exe restore current/ReactWindows/ReactNative.sln -Verbosity Detailed -NonInteractive

      - name: Install react-native-cli
        run: npm install -g react-native-cli

      - name: npm install
        run: cd current && npm install

      - name: Make Bundle Dir
        run: mkdir current\ReactWindows\Playground.Net46\ReactAssets

      - name: Make Bundle
        run: cd current && react-native bundle --platform windows --entry-file ./ReactWindows/Playground.Net46/index.windows.js --bundle-output ./ReactWindows/Playground.Net46/ReactAssets/index.windows.bundle --assets-dest ./ReactWindows/Playground.Net46/ReactAssets --dev false

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactNative.sln
        run: msbuild current/ReactWindows/ReactNative.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: Debug

      - name: Start Winium
        run: |
          $winium = Start-Process -PassThru ${{ runner.temp }}\winium\Winium.Desktop.Driver.exe
          Start-Sleep -s 5
        shell: powershell

      - name: UTs
        if: matrix.BuildPlatform != 'ARM'
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" current/ReactWindows/ReactNative.Net46.Tests/bin/${{ matrix.BuildPlatform }}/Debug/ReactNative.Net46.Tests.dll
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}

      # Previous AppVeyor definition had code to trigger this, but due to a bug in the AppVeyor build def it was never triggering
      # It currently fails, so commenting this out for now
      #- task: CmdLine@2
      #  displayName: npm test
      #  inputs:
      #    script: npm test
      #    workingDirectory: current
      #  condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'DebugBundle'), eq(variables['BuildConfiguration'], 'ReleaseBundle')))

  E2ETest:
    name: E2E Test
    runs-on: windows-2016
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Remove WebDriverIO Workaround
        run: ((Get-Content -path packages/E2ETest/package.json -Raw) -replace ".*webdriver.git.*","") | Set-Content -Path packages/E2ETest/package.json

      - name: Install react-native-cli
        run: npm install -g react-native-cli

      - name: yarn install
        run: yarn install --frozen-lockfile

      - name: Patch WebDriverIO
        run: ((Get-Content -path node_modules/webdriver/build/utils.js -Raw) -replace "if \(!body .*","if (!body) {") | Set-Content -Path node_modules/webdriver/build/utils.js

      - run: yarn build

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore packages/E2ETest/windows/ReactUWPTestApp.sln
        run: nuget.exe restore packages/E2ETest/windows/ReactUWPTestApp.sln -Verbosity Detailed -NonInteractive

      - name: Create Bundle
        run: cd packages/E2ETest && yarn bundle

      - name: run-windows
        run: cd packages/E2ETest && react-native run-windows --no-packager --arch x86 --release --logging

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactWindows-Desktop.sln
        run: msbuild vnext\ReactWindows-Desktop.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /p:PlatformToolset=v141 /p:RNW_PKG_VERSION_STR="Private Build" /p:RNW_PKG_VERSION="1000,0,0,0"
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      - name: Run Desktop Unit Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" vnext/target/${{matrix.BuildPlatform}\${{matrix.BuildConfiguration}}/React.Windows.Desktop.UnitTests/React.Windows.Desktop.UnitTests.dll

      - name: Run JSI Unit Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" JSI.Desktop.UnitTests/JSI.Desktop.UnitTests.exe

      - name: Setup test servers
        run: .\vnext\Scripts\Tfs\Start-TestServers.ps1 -SourcesDirectory .\vnext -Preload -SleepSeconds 120

      - name: Run Desktop Integration Tests
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll /blame -- RunConfiguration.TestSessionTimeout=300000
        if: ${{matrix.BuildConfiguration}} == 'Debug'

      - name: Check the metro bundle server
        run: Invoke-WebRequest -Uri "http://localhost:8081/IntegrationTests/IntegrationTestsAppWin.bundle?platform=windesktop&dev=true"

      - name: Cleanup any packagers left over from other builds
        run: |
          Get-NetTCPConnection -LocalPort 8081 -ErrorAction Ignore | ForEach-Object { Stop-Process $_.OwningProcess -ErrorAction Ignore }
          Get-NetTCPConnection -LocalPort 5555 -ErrorAction Ignore | ForEach-Object { Stop-Process $_.OwningProcess -ErrorAction Ignore }

      - name: Copy NuGet artifacts
        run: robocopy vnext/${{matrix.BuildPlatform}}/${{matrix.BuildConfiguration}} ${{ runner.temp }}\artifacts\${{matrix.BuildPlatform}}\${{matrix.BuildConfiguration}} /E /NP React.Windows.Desktop.DLL\** React.Windows.Desktop.Test.DLL\**

      - uses: actions/upload-artifact@master
        name: Publish Artifact ReactWindows
        with:
          name: ReactWindows
          path: ${{ runner.temp }}\artifacts

  RNWNugetPR:
    name: React-Native-Windows Build and Pack Nuget
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    needs: RnwNativePRBuild
    timeout-minutes: 15
    steps:
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows
          path: ${{ runner.temp }}\artifacts\ReactWindows

      - name: NuGet Pack Desktop
        run: nuget pack ${{ runner.temp }}\ReactWindows\ReactWin32.nuspec -OutputDirectory ${{ runner.temp }}\NugetRootFinal -Properties CommitId=${{github.sha}};version=0.0.1=pr;id=OfficeReact.Win32;nugetroot=${{runner.temp}}\NugetRootFinal

      - name: NuGet Pack ReactWin32
        run: nuget pack ${{ runner.temp }}\ReactWindows\ReactUWP.nuspec -OutputDirectory ${{ runner.temp }}\NugetRootFinal -Properties CommitId=${{github.sha}};version=0.0.1=pr;id=OfficeReact.UWP;nugetroot=${{runner.temp}}\NugetRootFinal
